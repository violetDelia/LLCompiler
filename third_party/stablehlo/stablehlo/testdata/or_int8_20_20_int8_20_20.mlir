// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<20x20xi8> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0:2 = call @inputs() : () -> (tensor<20x20xi8>, tensor<20x20xi8>)
    %1 = call @expected() : () -> tensor<20x20xi8>
    %2 = stablehlo.or %0#0, %0#1 : tensor<20x20xi8>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<20x20xi8>, tensor<20x20xi8>) -> ()
    return %2 : tensor<20x20xi8>
  }
  func.func private @inputs() -> (tensor<20x20xi8> {mhlo.layout_mode = "default"}, tensor<20x20xi8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<20x20xi8>
    %c_0 = stablehlo.constant dense<"0xtensor<20x20xi8>
    return %c, %c_0 : tensor<20x20xi8>, tensor<20x20xi8>
  }
  func.func private @expected() -> (tensor<20x20xi8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xFD03FEFFFFFF02FFFE05FEFF07FF010303FDFF0003FFFEFD0100060503FFFFFE00FDFEFEFC03FFFDFF00FFFDFFFFFF00FD00020201FFFF0103FD00FEFF0003000106FBFF0101FDFFFF070603FC02FE050104FFFEFF05FF03FCFE03FEFDF7FFFF00FEFFFF03FFFFFFFEFEFFFEFBFFFFFFFF06030002FFFDFEFFF907FBFF07FB03FF03FFFFFF0104FFFE04FBFFFC04FDFC00FFFFFE03FDFFFDFB00FC04FFFD02FE00FFFEFEFEFEFDFDFFFF01010404FF03FC010101FF0002010309FFFCFDFDFFFF07FE03000400FFFFFEFD0205FE020000000003FDFEFEFF0105FFFFFD0003FFFFFBFF02FD000107FFFFFFFF0503FF07FFFE03FFFEFEFF030301FF01FDFFFEFFFE0006FDF9FFFFFBFFFA02FDFEFDFDFFFAFF07FDFFFF03FF01FC060307FEFCFEFFFAFEFB0101FB03FB010302FF02FEFE000403FDFEFB0303FCFD05FF03FFFFFFFFFFFFFFFE00FFF9FFFFFFFF03FEFFFF0301FFFFFBFE02FD0207FFFDFFFFFFFEFD0002FB01FF03FD0205FCFF05FDFFFFFE03FFFFFE00FFFFFEFFFF03FDFDFF01FE0303FBFFFDFF010405FEFDFBFFFF03FB"> : tensor<20x20xi8>
    return %c : tensor<20x20xi8>
  }
}
