// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<5x6x7xi32> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<[[0, 1], [2, 3]]> : tensor<2x2xi64>
    %0:2 = call @inputs() : () -> (tensor<5x6x7xi32>, tensor<2x7xi32>)
    %1 = call @expected() : () -> tensor<5x6x7xi32>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1], inserted_window_dims = [0, 1], scatter_dims_to_operand_dims = [0, 1], index_vector_dim = 1>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      %3 = stablehlo.multiply %arg0, %arg1 : tensor<i32>
      stablehlo.return %3 : tensor<i32>
    }) : (tensor<5x6x7xi32>, tensor<2x2xi64>, tensor<2x7xi32>) -> tensor<5x6x7xi32>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<5x6x7xi32>, tensor<5x6x7xi32>) -> ()
    return %2 : tensor<5x6x7xi32>
  }
  func.func private @inputs() -> (tensor<5x6x7xi32> {mhlo.layout_mode = "default"}, tensor<2x7xi32> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0x00000000FCFFFFFF00000000FCFFFFFF030000000200000002000000FEFFFFFFFCFFFFFF0600000000000000FFFFFFFF0100000005000000FFFFFFFF01000000FCFFFFFF02000000FFFFFFFF00000000FCFFFFFF00000000FCFFFFFFFEFFFFFF00000000040000000000000002000000000000000200000001000000FEFFFFFF02000000FEFFFFFF010000000000000002000000FEFFFFFF0000000001000000F6FFFFFF03000000FFFFFFFF04000000000000000100000001000000FBFFFFFF0000000000000000FEFFFFFF04000000FAFFFFFF01000000FCFFFFFF0300000002000000FCFFFFFF00000000FBFFFFFF0000000001000000FFFFFFFF05000000000000000200000001000000000000000000000001000000040000000100000003000000FEFFFFFF000000000000000003000000FFFFFFFF000000000100000000000000FEFFFFFF0000000000000000FAFFFFFF0700000000000000FEFFFFFF060000000600000001000000010000000100000001000000FCFFFFFF000000000400000000000000050000000100000001000000020000000000000000000000FDFFFFFFFEFFFFFF00000000FEFFFFFF0200000003000000FFFFFFFF020000000300000002000000FCFFFFFF0000000000000000020000000100000002000000FDFFFFFF020000000100000002000000FFFFFFFF0200000001000000F8FFFFFFFEFFFFFF0200000000000000FFFFFFFFFEFFFFFFFDFFFFFF00000000FFFFFFFFFFFFFFFF0300000000000000FFFFFFFF01000000FBFFFFFF02000000FFFFFFFF02000000020000000000000000000000000000000500000000000000FFFFFFFFFBFFFFFFFBFFFFFFFDFFFFFF0000000000000000FFFFFFFFFFFFFFFF00000000FFFFFFFF0000000001000000FDFFFFFF00000000FDFFFFFF00000000FCFFFFFF00000000FCFFFFFFFFFFFFFF01000000FEFFFFFF0200000002000000020000000000000001000000020000000100000000000000000000000700000004000000FEFFFFFFFDFFFFFFFDFFFFFF0000000001000000FEFFFFFF06000000FFFFFFFF0200000003000000000000000000000000000000010000000600000004000000FFFFFFFFFFFFFFFF06000000FCFFFFFFFEFFFFFFFFFFFFFFFCFFFFFF070000000700000000000000"> : tensor<5x6x7xi32>
    %c_0 = stablehlo.constant dense<[[-1, 3, 0, -1, -3, 5, 2], [2, -3, 0, -1, 0, 0, 4]]> : tensor<2x7xi32>
    return %c, %c_0 : tensor<5x6x7xi32>, tensor<2x7xi32>
  }
  func.func private @expected() -> (tensor<5x6x7xi32> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<5x6x7xi32>
    return %c : tensor<5x6x7xi32>
  }
}
