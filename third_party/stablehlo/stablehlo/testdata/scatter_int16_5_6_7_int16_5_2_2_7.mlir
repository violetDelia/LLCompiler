// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<5x6x7xi16> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<[[[0], [1]], [[2], [3]]]> : tensor<2x2x1xi64>
    %0:2 = call @inputs() : () -> (tensor<5x6x7xi16>, tensor<5x2x2x7xi16>)
    %1 = call @expected() : () -> tensor<5x6x7xi16>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 3], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1], index_vector_dim = 2>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<i16>, %arg1: tensor<i16>):
      stablehlo.return %arg1 : tensor<i16>
    }) : (tensor<5x6x7xi16>, tensor<2x2x1xi64>, tensor<5x2x2x7xi16>) -> tensor<5x6x7xi16>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<5x6x7xi16>, tensor<5x6x7xi16>) -> ()
    return %2 : tensor<5x6x7xi16>
  }
  func.func private @inputs() -> (tensor<5x6x7xi16> {mhlo.layout_mode = "default"}, tensor<5x2x2x7xi16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0x02000100010006000100030004000200FFFFFDFF000006000400FBFF0300020000000000FDFF0100FCFF0400000000000400FCFFFDFFFFFF040001000300FDFF0000FDFF0300040001000300FDFF0200FFFF02000000FFFF040000000000000001000000000000000000FFFF00000200FFFF0200FCFF0300FDFF02000400FEFF01000300FFFFFEFFFFFFFEFF0300FFFF0200FFFF030000000000020000000000FCFF030005000200FEFFFDFFFDFFFCFF02000000FCFFFCFF0000FFFF00000500FEFF0000FEFFFDFF0300040001000000F9FFFDFFFDFFFFFFFFFF0000FFFFFCFF0100F6FF0000060003000300FFFF00000200000001000000000000000100FCFF03000000FDFFFFFFF7FF01000100040002000300FBFFFBFF010002000500FDFF00000100000003000100030000000000FDFF04000000000000000300FEFF020004000200010000000000FFFFFFFF0000FEFFFDFF010004000000FFFF0000040003000100FEFF0000FFFFFFFFFEFF010003000100FCFF0200FBFF02000300FBFFFDFFFBFF04000000FFFF01000400FBFF00000200000000000100FFFFFEFFFDFFFBFF0300"> : tensor<5x6x7xi16>
    %c_0 = stablehlo.constant dense<"0xtensor<5x2x2x7xi16>
    return %c, %c_0 : tensor<5x6x7xi16>, tensor<5x2x2x7xi16>
  }
  func.func private @expected() -> (tensor<5x6x7xi16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<5x6x7xi16>
    return %c : tensor<5x6x7xi16>
  }
}
