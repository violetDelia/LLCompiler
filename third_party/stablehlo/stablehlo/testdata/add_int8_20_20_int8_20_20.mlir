// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<20x20xi8> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0:2 = call @inputs() : () -> (tensor<20x20xi8>, tensor<20x20xi8>)
    %1 = call @expected() : () -> tensor<20x20xi8>
    %2 = stablehlo.add %0#0, %0#1 : tensor<20x20xi8>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<20x20xi8>, tensor<20x20xi8>) -> ()
    return %2 : tensor<20x20xi8>
  }
  func.func private @inputs() -> (tensor<20x20xi8> {mhlo.layout_mode = "default"}, tensor<20x20xi8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0x07FF00FF02FF000600000100FF01FEFEFD03FF0800010605FEFF010300FD000702000004FEFF0003FC08FE03FB00FAFB00FE02FB00000100020200FE01FE0100020204000001FD01FDFDFA0002000402FF01030500FD0103000003FEFD000500FEFFFFFCFE0202F902030201FD00FC00FF03FAFF0302FEFEFFFF00FF00020000000200F70001010001FF00FF03FE01FE06010100FEFF0402FF0105FD0401FD00040000FF00FDFF01F9010300000202FD0101FC000100FEFE0003FF0005FF0100FBFEFAFFFB00FA0300000103000200000003000003FF06030003FDFE000004FF02FDFFFEFD00000200000002FCFEFEFF000202FB02FD0105FD0001000000FBFE0001FFFD00FEFC0000020302010000FF0000060002FF00FFFDFEFFFCFC0202FF03040001FFFF020100FFFF0100FFFF0103020106FF00000103000102060200FF00FA0002FF0701FFFFFF0200000300FF05FE00FC020002000203FF04000001FF00FFFD0400FBFDFAFEFE03FC02FE01FC02FF0701FD0002010200020000FE0002FF00040001FE01010101F7FC02FC0001"> : tensor<20x20xi8>
    %c_0 = stablehlo.constant dense<"0xtensor<20x20xi8>
    return %c, %c_0 : tensor<20x20xi8>, tensor<20x20xi8>
  }
  func.func private @expected() -> (tensor<20x20xi8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<20x20xi8>
    return %c : tensor<20x20xi8>
  }
}
