// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<4x2x3x5xi32> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<[0, 4]> : tensor<2xi64>
    %0:2 = call @inputs() : () -> (tensor<4x2x3x5xi32>, tensor<4x3xi32>)
    %1 = call @expected() : () -> tensor<4x2x3x5xi32>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 1], inserted_window_dims = [1, 3], scatter_dims_to_operand_dims = [1, 3]>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      stablehlo.return %arg1 : tensor<i32>
    }) : (tensor<4x2x3x5xi32>, tensor<2xi64>, tensor<4x3xi32>) -> tensor<4x2x3x5xi32>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<4x2x3x5xi32>, tensor<4x2x3x5xi32>) -> ()
    return %2 : tensor<4x2x3x5xi32>
  }
  func.func private @inputs() -> (tensor<4x2x3x5xi32> {mhlo.layout_mode = "default"}, tensor<4x3xi32> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<4x2x3x5xi32>
    %c_0 = stablehlo.constant dense<[[0, 0, 4], [2, 2, 1], [0, -1, -1], [4, 3, -5]]> : tensor<4x3xi32>
    return %c, %c_0 : tensor<4x2x3x5xi32>, tensor<4x3xi32>
  }
  func.func private @expected() -> (tensor<4x2x3x5xi32> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0x0200000001000000000000000000000000000000FEFFFFFFFFFFFFFF000000000000000000000000030000000200000002000000000000000400000000000000FFFFFFFF0000000000000000FFFFFFFF00000000FFFFFFFF04000000FFFFFFFF0400000000000000FFFFFFFF070000000000000000000000020000000700000001000000000000000200000004000000FEFFFFFFFDFFFFFFFDFFFFFF0200000001000000FAFFFFFF00000000000000000100000000000000FFFFFFFF020000000000000002000000000000000300000000000000FFFFFFFF00000000FBFFFFFFFCFFFFFF020000000000000003000000FCFFFFFFFEFFFFFFFFFFFFFF0000000000000000FDFFFFFF00000000F9FFFFFF01000000FFFFFFFF03000000000000000000000000000000FFFFFFFF0000000003000000020000000000000000000000FFFFFFFFFFFFFFFF00000000FFFFFFFF020000000200000001000000010000000300000003000000FCFFFFFF0000000004000000FEFFFFFF0400000004000000FCFFFFFFFFFFFFFF0100000003000000FFFFFFFF0200000003000000FCFFFFFFFBFFFFFF0100000003000000FFFFFFFFFBFFFFFFFEFFFFFF00000000FDFFFFFF0500000004000000FCFFFFFF01000000FEFFFFFF07000000FBFFFFFFFBFFFFFF"> : tensor<4x2x3x5xi32>
    return %c : tensor<4x2x3x5xi32>
  }
}
