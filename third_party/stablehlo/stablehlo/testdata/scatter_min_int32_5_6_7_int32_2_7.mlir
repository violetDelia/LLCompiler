// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<5x6x7xi32> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<[[0, 1], [2, 3]]> : tensor<2x2xi64>
    %0:2 = call @inputs() : () -> (tensor<5x6x7xi32>, tensor<2x7xi32>)
    %1 = call @expected() : () -> tensor<5x6x7xi32>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1], inserted_window_dims = [0, 1], scatter_dims_to_operand_dims = [0, 1], index_vector_dim = 1>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):
      %3 = stablehlo.minimum %arg0, %arg1 : tensor<i32>
      stablehlo.return %3 : tensor<i32>
    }) : (tensor<5x6x7xi32>, tensor<2x2xi64>, tensor<2x7xi32>) -> tensor<5x6x7xi32>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<5x6x7xi32>, tensor<5x6x7xi32>) -> ()
    return %2 : tensor<5x6x7xi32>
  }
  func.func private @inputs() -> (tensor<5x6x7xi32> {mhlo.layout_mode = "default"}, tensor<2x7xi32> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0x030000000000000000000000FBFFFFFF0500000000000000FAFFFFFF01000000FDFFFFFF01000000FEFFFFFF00000000020000000100000000000000FFFFFFFF0100000000000000FEFFFFFF000000000300000000000000FEFFFFFF00000000FDFFFFFF01000000FEFFFFFF00000000FFFFFFFFFFFFFFFF02000000FFFFFFFFFCFFFFFF000000000000000000000000FDFFFFFFFDFFFFFF0600000001000000000000000000000001000000FCFFFFFF010000000100000002000000FEFFFFFF0200000004000000FFFFFFFF02000000050000000100000004000000000000000000000000000000090000000000000001000000FDFFFFFF00000000FEFFFFFF00000000F8FFFFFFFEFFFFFFFDFFFFFF0000000000000000FEFFFFFF0700000001000000FBFFFFFF00000000FFFFFFFFFFFFFFFFFCFFFFFFFFFFFFFF03000000FFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000FCFFFFFF00000000FFFFFFFF02000000FDFFFFFF000000000000000002000000000000000000000001000000FCFFFFFF0100000007000000F8FFFFFF00000000FFFFFFFF02000000F9FFFFFF0000000000000000000000000400000002000000FEFFFFFF0300000000000000020000000000000000000000010000000600000000000000020000000100000000000000FFFFFFFF05000000020000000200000002000000FEFFFFFF0100000001000000FCFFFFFF01000000010000000000000000000000FFFFFFFFFFFFFFFF00000000FFFFFFFF0000000000000000FDFFFFFF0000000001000000FCFFFFFF0300000006000000FDFFFFFF00000000FFFFFFFF020000000000000000000000FDFFFFFF020000000000000000000000010000000000000001000000000000000000000005000000FFFFFFFF02000000FEFFFFFFFEFFFFFF0000000000000000000000000000000000000000000000000300000000000000FCFFFFFF0100000004000000FFFFFFFF000000000000000002000000FEFFFFFFF6FFFFFFFAFFFFFF0100000003000000FAFFFFFF0200000001000000000000000200000000000000FCFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFDFFFFFF01000000FBFFFFFFFFFFFFFF0100000005000000FDFFFFFF030000000500000005000000FFFFFFFF"> : tensor<5x6x7xi32>
    %c_0 = stablehlo.constant dense<[[-5, 0, 3, 6, -1, -5, 0], [2, 2, 2, 3, 0, -5, 2]]> : tensor<2x7xi32>
    return %c, %c_0 : tensor<5x6x7xi32>, tensor<2x7xi32>
  }
  func.func private @expected() -> (tensor<5x6x7xi32> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<5x6x7xi32>
    return %c : tensor<5x6x7xi32>
  }
}
