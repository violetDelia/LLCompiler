// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<5x6x7xui16> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<[[[0], [1]], [[2], [3]]]> : tensor<2x2x1xi64>
    %0:2 = call @inputs() : () -> (tensor<5x6x7xui16>, tensor<5x2x2x7xui16>)
    %1 = call @expected() : () -> tensor<5x6x7xui16>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 3], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1], index_vector_dim = 2>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<ui16>, %arg1: tensor<ui16>):
      stablehlo.return %arg1 : tensor<ui16>
    }) : (tensor<5x6x7xui16>, tensor<2x2x1xi64>, tensor<5x2x2x7xui16>) -> tensor<5x6x7xui16>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<5x6x7xui16>, tensor<5x6x7xui16>) -> ()
    return %2 : tensor<5x6x7xui16>
  }
  func.func private @inputs() -> (tensor<5x6x7xui16> {mhlo.layout_mode = "default"}, tensor<5x2x2x7xui16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0x040000000400010000000100000000000200010001000000010001000000020001000000000002000100000000000400030001000000040002000000020001000300000002000600040009000200000003000300010000000200000000000500010001000200000000000000010005000200010002000300010003000000020000000000020000000000010002000100030000000100020000000000040001000100030005000000010001000400000004000200010001000000000000000700020002000000030002000200000000000000000000000300030004000200010002000000000001000000030001000500010002000100040000000200020004000000030002000100010000000300000004000200030003000100020003000300030002000100020002000000000004000200000000000000010000000000010000000200020006000100020002000000010000000000000001000200020002000400010001000000040001000300000001000000040001000300010002000600010002000600000001000500000001000300030002000100010003000000020001000200"> : tensor<5x6x7xui16>
    %c_0 = stablehlo.constant dense<"0xtensor<5x2x2x7xui16>
    return %c, %c_0 : tensor<5x6x7xui16>, tensor<5x2x2x7xui16>
  }
  func.func private @expected() -> (tensor<5x6x7xui16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<5x6x7xui16>
    return %c : tensor<5x6x7xui16>
  }
}
