// RUN-DISABLED(#2590, timeout): stablehlo-opt --chlo-pre-serialization-pipeline -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-opt --chlo-pre-serialization-pipeline %s | stablehlo-translate --serialize --target=current | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt --chlo-pre-serialization-pipeline %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<20x20xf64> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0:2 = call @inputs() : () -> (tensor<20x20xf64>, tensor<20x20xf64>)
    %1 = call @expected() : () -> tensor<20x20xf64>
    %2 = stablehlo.compare  NE, %0#0, %0#0,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %3 = stablehlo.compare  NE, %0#1, %0#1,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %4 = stablehlo.or %2, %3 : tensor<20x20xi1>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %5 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %6 = stablehlo.compare  EQ, %0#1, %5,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %cst_0 = stablehlo.constant dense<0x7FF0000000000000> : tensor<f64>
    %7 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %8 = stablehlo.compare  EQ, %0#1, %7,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %9 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %10 = stablehlo.compare  LT, %0#1, %9,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %11 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %12 = stablehlo.compare  LE, %0#0, %11,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %13 = stablehlo.or %10, %12 : tensor<20x20xi1>
    %cst_3 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %14 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %15 = stablehlo.compare  GT, %0#1, %14,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %16 = stablehlo.compare  GT, %0#1, %0#0,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %17 = stablehlo.and %15, %16 : tensor<20x20xi1>
    %18 = stablehlo.log %0#1 : tensor<20x20xf64>
    %19 = stablehlo.multiply %0#0, %18 : tensor<20x20xf64>
    %20 = stablehlo.subtract %19, %0#1 : tensor<20x20xf64>
    %21 = chlo.lgamma %0#0 : tensor<20x20xf64> -> tensor<20x20xf64>
    %22 = stablehlo.subtract %20, %21 : tensor<20x20xf64>
    %cst_4 = stablehlo.constant dense<1.7976931348623157E+308> : tensor<f64>
    %23 = stablehlo.log %cst_4 : tensor<f64>
    %24 = stablehlo.negate %23 : tensor<f64>
    %25 = stablehlo.broadcast_in_dim %24, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %26 = stablehlo.compare  LT, %22, %25,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
    %27 = stablehlo.exponential %22 : tensor<20x20xf64>
    %28 = stablehlo.or %6, %13 : tensor<20x20xi1>
    %29 = stablehlo.or %28, %26 : tensor<20x20xi1>
    %30 = stablehlo.or %29, %4 : tensor<20x20xi1>
    %31 = stablehlo.not %30 : tensor<20x20xi1>
    %32 = stablehlo.and %31, %17 : tensor<20x20xi1>
    %cst_5 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %33 = stablehlo.broadcast_in_dim %cst_5, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %34 = stablehlo.subtract %33, %0#0 : tensor<20x20xf64>
    %35 = stablehlo.add %0#1, %34 : tensor<20x20xf64>
    %cst_6 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %36 = stablehlo.broadcast_in_dim %cst_6, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %37 = stablehlo.add %35, %36 : tensor<20x20xf64>
    %cst_7 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %38 = stablehlo.broadcast_in_dim %cst_7, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %cst_8 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %39 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %40 = stablehlo.add %0#1, %39 : tensor<20x20xf64>
    %41 = stablehlo.multiply %37, %0#1 : tensor<20x20xf64>
    %42 = stablehlo.divide %40, %41 : tensor<20x20xf64>
    %cst_9 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %43 = stablehlo.broadcast_in_dim %cst_9, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %cst_10 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %44 = stablehlo.broadcast_in_dim %cst_10, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %cst_11 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %45 = stablehlo.broadcast_in_dim %cst_11, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %cst_12 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %46 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %47 = stablehlo.negate %0#1 : tensor<20x20xf64>
    %48 = stablehlo.multiply %42, %47 : tensor<20x20xf64>
    %49 = stablehlo.subtract %46, %48 : tensor<20x20xf64>
    %50 = stablehlo.divide %49, %41 : tensor<20x20xf64>
    %cst_13 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %51:15 = stablehlo.while(%iterArg = %32, %iterArg_22 = %42, %iterArg_23 = %43, %iterArg_24 = %34, %iterArg_25 = %37, %iterArg_26 = %cst_13, %iterArg_27 = %40, %iterArg_28 = %41, %iterArg_29 = %38, %iterArg_30 = %0#1, %iterArg_31 = %44, %iterArg_32 = %45, %iterArg_33 = %46, %iterArg_34 = %47, %iterArg_35 = %50) : tensor<20x20xi1>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<f64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>
     cond {
      %cst_36 = stablehlo.constant dense<2.000000e+03> : tensor<f64>
      %72 = stablehlo.compare  LT, %iterArg_26, %cst_36,  FLOAT : (tensor<f64>, tensor<f64>) -> tensor<i1>
      %c = stablehlo.constant dense<false> : tensor<i1>
      %73 = stablehlo.reduce(%iterArg init: %c) applies stablehlo.or across dimensions = [0, 1] : (tensor<20x20xi1>, tensor<i1>) -> tensor<i1>
      %74 = stablehlo.and %72, %73 : tensor<i1>
      stablehlo.return %74 : tensor<i1>
    } do {
      %cst_36 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
      %72 = stablehlo.add %iterArg_26, %cst_36 : tensor<f64>
      %cst_37 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
      %73 = stablehlo.broadcast_in_dim %cst_37, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %74 = stablehlo.add %iterArg_24, %73 : tensor<20x20xf64>
      %cst_38 = stablehlo.constant dense<2.000000e+00> : tensor<f64>
      %75 = stablehlo.broadcast_in_dim %cst_38, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %76 = stablehlo.add %iterArg_25, %75 : tensor<20x20xf64>
      %77 = stablehlo.broadcast_in_dim %72, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %78 = stablehlo.multiply %74, %77 : tensor<20x20xf64>
      %79 = stablehlo.multiply %iterArg_27, %76 : tensor<20x20xf64>
      %80 = stablehlo.multiply %iterArg_29, %78 : tensor<20x20xf64>
      %81 = stablehlo.subtract %79, %80 : tensor<20x20xf64>
      %82 = stablehlo.multiply %iterArg_28, %76 : tensor<20x20xf64>
      %83 = stablehlo.multiply %iterArg_30, %78 : tensor<20x20xf64>
      %84 = stablehlo.subtract %82, %83 : tensor<20x20xf64>
      %cst_39 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
      %85 = stablehlo.broadcast_in_dim %cst_39, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %86 = stablehlo.compare  NE, %84, %85,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
      %87 = stablehlo.divide %81, %84 : tensor<20x20xf64>
      %88 = stablehlo.subtract %iterArg_22, %87 : tensor<20x20xf64>
      %89 = stablehlo.divide %88, %87 : tensor<20x20xf64>
      %90 = stablehlo.abs %89 : tensor<20x20xf64>
      %cst_40 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
      %91 = stablehlo.broadcast_in_dim %cst_40, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %92 = stablehlo.select %86, %90, %91 : tensor<20x20xi1>, tensor<20x20xf64>
      %93 = stablehlo.select %86, %87, %iterArg_22 : tensor<20x20xi1>, tensor<20x20xf64>
      %94 = stablehlo.multiply %iterArg_33, %76 : tensor<20x20xf64>
      %95 = stablehlo.subtract %94, %iterArg_27 : tensor<20x20xf64>
      %96 = stablehlo.multiply %iterArg_31, %78 : tensor<20x20xf64>
      %97 = stablehlo.subtract %95, %96 : tensor<20x20xf64>
      %98 = stablehlo.broadcast_in_dim %72, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %99 = stablehlo.multiply %iterArg_29, %98 : tensor<20x20xf64>
      %100 = stablehlo.add %97, %99 : tensor<20x20xf64>
      %101 = stablehlo.multiply %iterArg_34, %76 : tensor<20x20xf64>
      %102 = stablehlo.subtract %101, %iterArg_28 : tensor<20x20xf64>
      %103 = stablehlo.multiply %iterArg_32, %78 : tensor<20x20xf64>
      %104 = stablehlo.subtract %102, %103 : tensor<20x20xf64>
      %105 = stablehlo.broadcast_in_dim %72, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %106 = stablehlo.multiply %iterArg_30, %105 : tensor<20x20xf64>
      %107 = stablehlo.add %104, %106 : tensor<20x20xf64>
      %108 = stablehlo.multiply %93, %107 : tensor<20x20xf64>
      %109 = stablehlo.subtract %100, %108 : tensor<20x20xf64>
      %110 = stablehlo.divide %109, %84 : tensor<20x20xf64>
      %111 = stablehlo.select %86, %110, %iterArg_35 : tensor<20x20xi1>, tensor<20x20xf64>
      %112 = stablehlo.subtract %111, %iterArg_35 : tensor<20x20xf64>
      %113 = stablehlo.abs %112 : tensor<20x20xf64>
      %cst_41 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
      %114 = stablehlo.broadcast_in_dim %cst_41, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %115 = stablehlo.select %86, %113, %114 : tensor<20x20xi1>, tensor<20x20xf64>
      %116 = stablehlo.abs %81 : tensor<20x20xf64>
      %cst_42 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %117 = func.call @integer_pow(%cst_42) : (tensor<f64>) -> tensor<f64>
      %118 = stablehlo.broadcast_in_dim %117, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %119 = stablehlo.compare  GT, %116, %118,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
      %cst_43 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %120 = stablehlo.broadcast_in_dim %cst_43, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %121 = stablehlo.multiply %iterArg_27, %120 : tensor<20x20xf64>
      %122 = stablehlo.select %119, %121, %iterArg_27 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_44 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %123 = stablehlo.broadcast_in_dim %cst_44, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %124 = stablehlo.multiply %81, %123 : tensor<20x20xf64>
      %125 = stablehlo.select %119, %124, %81 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_45 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %126 = stablehlo.broadcast_in_dim %cst_45, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %127 = stablehlo.multiply %iterArg_28, %126 : tensor<20x20xf64>
      %128 = stablehlo.select %119, %127, %iterArg_28 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_46 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %129 = stablehlo.broadcast_in_dim %cst_46, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %130 = stablehlo.multiply %84, %129 : tensor<20x20xf64>
      %131 = stablehlo.select %119, %130, %84 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_47 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %132 = stablehlo.broadcast_in_dim %cst_47, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %133 = stablehlo.multiply %iterArg_33, %132 : tensor<20x20xf64>
      %134 = stablehlo.select %119, %133, %iterArg_33 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_48 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %135 = stablehlo.broadcast_in_dim %cst_48, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %136 = stablehlo.multiply %iterArg_34, %135 : tensor<20x20xf64>
      %137 = stablehlo.select %119, %136, %iterArg_34 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_49 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %138 = stablehlo.broadcast_in_dim %cst_49, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %139 = stablehlo.multiply %100, %138 : tensor<20x20xf64>
      %140 = stablehlo.select %119, %139, %100 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_50 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %141 = stablehlo.broadcast_in_dim %cst_50, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %142 = stablehlo.multiply %107, %141 : tensor<20x20xf64>
      %143 = stablehlo.select %119, %142, %107 : tensor<20x20xi1>, tensor<20x20xf64>
      %cst_51 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %144 = stablehlo.broadcast_in_dim %cst_51, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %145 = stablehlo.compare  GT, %92, %144,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
      %146 = stablehlo.and %iterArg, %145 : tensor<20x20xi1>
      %147 = stablehlo.select %iterArg, %93, %iterArg_22 : tensor<20x20xi1>, tensor<20x20xf64>
      %148 = stablehlo.select %iterArg, %92, %iterArg_23 : tensor<20x20xi1>, tensor<20x20xf64>
      %149 = stablehlo.select %iterArg, %74, %iterArg_24 : tensor<20x20xi1>, tensor<20x20xf64>
      %150 = stablehlo.select %iterArg, %76, %iterArg_25 : tensor<20x20xi1>, tensor<20x20xf64>
      %151 = stablehlo.select %iterArg, %125, %iterArg_27 : tensor<20x20xi1>, tensor<20x20xf64>
      %152 = stablehlo.select %iterArg, %131, %iterArg_28 : tensor<20x20xi1>, tensor<20x20xf64>
      %153 = stablehlo.select %iterArg, %122, %iterArg_29 : tensor<20x20xi1>, tensor<20x20xf64>
      %154 = stablehlo.select %iterArg, %128, %iterArg_30 : tensor<20x20xi1>, tensor<20x20xf64>
      %155 = stablehlo.select %iterArg, %134, %iterArg_31 : tensor<20x20xi1>, tensor<20x20xf64>
      %156 = stablehlo.select %iterArg, %137, %iterArg_32 : tensor<20x20xi1>, tensor<20x20xf64>
      %157 = stablehlo.select %iterArg, %140, %iterArg_33 : tensor<20x20xi1>, tensor<20x20xf64>
      %158 = stablehlo.select %iterArg, %143, %iterArg_34 : tensor<20x20xi1>, tensor<20x20xf64>
      %159 = stablehlo.select %iterArg, %111, %iterArg_35 : tensor<20x20xi1>, tensor<20x20xf64>
      stablehlo.return %146, %147, %148, %149, %150, %72, %151, %152, %153, %154, %155, %156, %157, %158, %159 : tensor<20x20xi1>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<f64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>
    }
    %52 = stablehlo.multiply %51#1, %27 : tensor<20x20xf64>
    %cst_14 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %53 = stablehlo.broadcast_in_dim %cst_14, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %54 = stablehlo.subtract %53, %52 : tensor<20x20xf64>
    %55 = stablehlo.not %17 : tensor<20x20xi1>
    %56 = stablehlo.and %31, %55 : tensor<20x20xi1>
    %cst_15 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %57 = stablehlo.broadcast_in_dim %cst_15, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %cst_16 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %58 = stablehlo.broadcast_in_dim %cst_16, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %cst_17 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %59 = stablehlo.broadcast_in_dim %cst_17, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %cst_18 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %60 = stablehlo.broadcast_in_dim %cst_18, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %61:7 = stablehlo.while(%iterArg = %56, %iterArg_22 = %0#0, %iterArg_23 = %57, %iterArg_24 = %58, %iterArg_25 = %0#1, %iterArg_26 = %59, %iterArg_27 = %60) : tensor<20x20xi1>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>
     cond {
      %c = stablehlo.constant dense<false> : tensor<i1>
      %72 = stablehlo.reduce(%iterArg init: %c) applies stablehlo.or across dimensions = [0, 1] : (tensor<20x20xi1>, tensor<i1>) -> tensor<i1>
      stablehlo.return %72 : tensor<i1>
    } do {
      %cst_28 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
      %72 = stablehlo.broadcast_in_dim %cst_28, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %73 = stablehlo.add %iterArg_22, %72 : tensor<20x20xf64>
      %74 = stablehlo.divide %iterArg_25, %73 : tensor<20x20xf64>
      %75 = stablehlo.multiply %iterArg_26, %74 : tensor<20x20xf64>
      %76 = stablehlo.multiply %iterArg_23, %iterArg_25 : tensor<20x20xf64>
      %77 = stablehlo.multiply %73, %73 : tensor<20x20xf64>
      %78 = stablehlo.divide %76, %77 : tensor<20x20xf64>
      %79 = stablehlo.subtract %75, %78 : tensor<20x20xf64>
      %80 = stablehlo.add %iterArg_27, %79 : tensor<20x20xf64>
      %81 = stablehlo.divide %iterArg_25, %73 : tensor<20x20xf64>
      %82 = stablehlo.multiply %iterArg_23, %81 : tensor<20x20xf64>
      %83 = stablehlo.add %iterArg_24, %82 : tensor<20x20xf64>
      %84 = stablehlo.divide %82, %83 : tensor<20x20xf64>
      %cst_29 = stablehlo.constant dense<2.2204460492503131E-16> : tensor<f64>
      %85 = stablehlo.broadcast_in_dim %cst_29, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
      %86 = stablehlo.compare  GT, %84, %85,  FLOAT : (tensor<20x20xf64>, tensor<20x20xf64>) -> tensor<20x20xi1>
      %87 = stablehlo.and %iterArg, %86 : tensor<20x20xi1>
      %88 = stablehlo.select %iterArg, %73, %iterArg_22 : tensor<20x20xi1>, tensor<20x20xf64>
      %89 = stablehlo.select %iterArg, %82, %iterArg_23 : tensor<20x20xi1>, tensor<20x20xf64>
      %90 = stablehlo.select %iterArg, %83, %iterArg_24 : tensor<20x20xi1>, tensor<20x20xf64>
      %91 = stablehlo.select %iterArg, %iterArg_25, %iterArg_25 : tensor<20x20xi1>, tensor<20x20xf64>
      %92 = stablehlo.select %iterArg, %79, %iterArg_26 : tensor<20x20xi1>, tensor<20x20xf64>
      %93 = stablehlo.select %iterArg, %80, %iterArg_27 : tensor<20x20xi1>, tensor<20x20xf64>
      stablehlo.return %87, %88, %89, %90, %91, %92, %93 : tensor<20x20xi1>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>, tensor<20x20xf64>
    }
    %62 = stablehlo.multiply %61#3, %27 : tensor<20x20xf64>
    %63 = stablehlo.divide %62, %0#0 : tensor<20x20xf64>
    %64 = stablehlo.select %17, %54, %63 : tensor<20x20xi1>, tensor<20x20xf64>
    %cst_19 = stablehlo.constant dense<0.000000e+00> : tensor<f64>
    %65 = stablehlo.broadcast_in_dim %cst_19, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %66 = stablehlo.select %6, %65, %64 : tensor<20x20xi1>, tensor<20x20xf64>
    %cst_20 = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %67 = stablehlo.broadcast_in_dim %cst_20, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %68 = stablehlo.select %8, %67, %66 : tensor<20x20xi1>, tensor<20x20xf64>
    %69 = stablehlo.or %13, %4 : tensor<20x20xi1>
    %cst_21 = stablehlo.constant dense<0x7FF8000000000000> : tensor<f64>
    %70 = stablehlo.broadcast_in_dim %cst_21, dims = [] : (tensor<f64>) -> tensor<20x20xf64>
    %71 = stablehlo.select %69, %70, %68 : tensor<20x20xi1>, tensor<20x20xf64>
    stablehlo.custom_call @check.expect_almost_eq(%71, %1) {has_side_effect = true} : (tensor<20x20xf64>, tensor<20x20xf64>) -> ()
    return %71 : tensor<20x20xf64>
  }
  func.func private @inputs() -> (tensor<20x20xf64> {mhlo.layout_mode = "default"}, tensor<20x20xf64> {mhlo.layout_mode = "default"}) {
    %cst = stablehlo.constant dense<"0xtensor<20x20xf64>
    %cst_0 = stablehlo.constant dense<"0xtensor<20x20xf64>
    return %cst, %cst_0 : tensor<20x20xf64>, tensor<20x20xf64>
  }
  func.func private @expected() -> (tensor<20x20xf64> {mhlo.layout_mode = "default"}) {
    %cst = stablehlo.constant dense<"0xtensor<20x20xf64>
    return %cst : tensor<20x20xf64>
  }
  func.func private @integer_pow(%arg0: tensor<f64>) -> tensor<f64> {
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f64>
    %0 = stablehlo.divide %cst, %arg0 : tensor<f64>
    return %0 : tensor<f64>
  }
}
