// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<5x6x7xui16> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<[[[0, 1], [2, 3]], [[4, 0], [1, 2]]]> : tensor<2x2x2xi64>
    %0:2 = call @inputs() : () -> (tensor<5x6x7xui16>, tensor<5x2x2xui16>)
    %1 = call @expected() : () -> tensor<5x6x7xui16>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0], inserted_window_dims = [1, 2], scatter_dims_to_operand_dims = [1, 2], index_vector_dim = 2>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<ui16>, %arg1: tensor<ui16>):
      stablehlo.return %arg1 : tensor<ui16>
    }) : (tensor<5x6x7xui16>, tensor<2x2x2xi64>, tensor<5x2x2xui16>) -> tensor<5x6x7xui16>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<5x6x7xui16>, tensor<5x6x7xui16>) -> ()
    return %2 : tensor<5x6x7xui16>
  }
  func.func private @inputs() -> (tensor<5x6x7xui16> {mhlo.layout_mode = "default"}, tensor<5x2x2xui16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0x000005000200010000000200000005000200030001000000010001000100060003000000020002000500050000000200040000000100000001000000020002000600000003000000020001000100050000000000020000000200020004000000040004000200050004000200020000000800040001000700050002000000030002000200060003000100000001000000000005000400010003000500030002000200040000000100040005000400030006000300020005000300000004000300020005000000000002000000010001000100030002000200040001000200010001000400020003000100010000000100010001000000020001000000060000000100080002000100060002000100060001000100000001000000000004000500010007000100000002000500080004000400000004000400050001000000020001000200010001000200000001000700020000000100010001000000030001000200000003000200000001000300000000000000010000000200000003000000020003000000030004000100000001000000020000000000010000000100010006000000"> : tensor<5x6x7xui16>
    %c_0 = stablehlo.constant dense<[[[0, 1], [3, 4]], [[2, 1], [1, 0]], [[3, 1], [0, 4]], [[1, 0], [1, 7]], [[6, 4], [0, 2]]]> : tensor<5x2x2xui16>
    return %c, %c_0 : tensor<5x6x7xui16>, tensor<5x2x2xui16>
  }
  func.func private @expected() -> (tensor<5x6x7xui16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<5x6x7xui16>
    return %c : tensor<5x6x7xui16>
  }
}
