// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<5x6x7xi16> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<[[[0], [1]], [[2], [3]]]> : tensor<2x2x1xi64>
    %0:2 = call @inputs() : () -> (tensor<5x6x7xi16>, tensor<5x2x2x7xi16>)
    %1 = call @expected() : () -> tensor<5x6x7xi16>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0, 3], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1], index_vector_dim = 2>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<i16>, %arg1: tensor<i16>):
      %3 = stablehlo.add %arg0, %arg1 : tensor<i16>
      stablehlo.return %3 : tensor<i16>
    }) : (tensor<5x6x7xi16>, tensor<2x2x1xi64>, tensor<5x2x2x7xi16>) -> tensor<5x6x7xi16>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<5x6x7xi16>, tensor<5x6x7xi16>) -> ()
    return %2 : tensor<5x6x7xi16>
  }
  func.func private @inputs() -> (tensor<5x6x7xi16> {mhlo.layout_mode = "default"}, tensor<5x2x2x7xi16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<5x6x7xi16>
    %c_0 = stablehlo.constant dense<"0x0400FAFF010000000300FEFFFDFF0000FBFFFEFFFEFFFEFF010000000000FFFF00000200000001000200FBFFFDFFFCFF04000000FCFF00000100FEFF030001000200000002000200FFFFFFFF020003000000010004000000FCFFFFFFFDFF0100030001000600FCFF0000FCFF0200FEFF0000FFFFFEFF00000200FFFF02000000FDFF01000200FDFF010001000300FCFFFBFFFEFFFFFF06000200FDFF0300FFFF04000200FEFFFEFFFDFF0100FFFFFEFF0400FDFFFFFF0300FDFFFBFFFCFF010002000000FFFF00000000FDFF000003000200030004000100FEFFFCFF0400FFFF0000000000000000030001000000020002000600FBFF0300FFFFFCFFFDFF0300000001000100000000000200FFFFFCFFFEFF0000FCFF0400"> : tensor<5x2x2x7xi16>
    return %c, %c_0 : tensor<5x6x7xi16>, tensor<5x2x2x7xi16>
  }
  func.func private @expected() -> (tensor<5x6x7xi16> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<5x6x7xi16>
    return %c : tensor<5x6x7xi16>
  }
}
