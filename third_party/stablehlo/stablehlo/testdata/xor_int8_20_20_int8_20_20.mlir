// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<20x20xi8> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0:2 = call @inputs() : () -> (tensor<20x20xi8>, tensor<20x20xi8>)
    %1 = call @expected() : () -> tensor<20x20xi8>
    %2 = stablehlo.xor %0#0, %0#1 : tensor<20x20xi8>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<20x20xi8>, tensor<20x20xi8>) -> ()
    return %2 : tensor<20x20xi8>
  }
  func.func private @inputs() -> (tensor<20x20xi8> {mhlo.layout_mode = "default"}, tensor<20x20xi8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<20x20xi8>
    %c_0 = stablehlo.constant dense<"0xFF000004000000FEFE00FCFF00030200010000030003FDFF0400FFFD00FFFDFE030000040301FC030003FF020006FE0200000002030101040003000001000401030101FEFF0000020100FF01FA000200020001000106FF03FEFE050201FE0400FCFD01070000040000000100020000FE020000FAFB03010200FEFE000001010000FE03FF070100FBFC01FD00FFFE02FDFBFDFFFF00FDFC000201000005FB04FF0100FE00FFFEFEFB0201FDFC0200000201060100FFFDFF0000000101FF01FEFF0100FB03F900FF07FF00000102FD00FC000003FCFC04FE0400FEFF04FF05010000000104FA06010000FFFCFD00FE00FE0000010003FF00FEFE00FFFF00FF04FF00FC01040400FF040100FF02080506FEFD030104020102010002FE00FD000000FD0001FEFF01030001FD00030003FC01060002FD00FEFDFC03FFFE010100080305FF030201FF01FB05FF06000202FDFF0400FC000002020002FFFE01FCFC04FE010000FD01FFFBFD01FB020101FC00FF000405FDFF01000400F70003FFFF0001FD0200FAFAFAF8040002FD0300010001"> : tensor<20x20xi8>
    return %c, %c_0 : tensor<20x20xi8>, tensor<20x20xi8>
  }
  func.func private @expected() -> (tensor<20x20xi8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<20x20xi8>
    return %c : tensor<20x20xi8>
  }
}
