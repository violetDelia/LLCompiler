// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<1x125xf32> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<0> : tensor<1xi64>
    %0:2 = call @inputs() : () -> (tensor<1x125xf32>, tensor<1xf32>)
    %1 = call @expected() : () -> tensor<1x125xf32>
    %2 = "stablehlo.scatter"(%0#0, %c, %0#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [0], inserted_window_dims = [1], scatter_dims_to_operand_dims = [1]>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):
      %3 = stablehlo.add %arg0, %arg1 : tensor<f32>
      stablehlo.return %3 : tensor<f32>
    }) : (tensor<1x125xf32>, tensor<1xi64>, tensor<1xf32>) -> tensor<1x125xf32>
    stablehlo.custom_call @check.expect_close(%2, %1) {has_side_effect = true} : (tensor<1x125xf32>, tensor<1x125xf32>) -> ()
    return %2 : tensor<1x125xf32>
  }
  func.func private @inputs() -> (tensor<1x125xf32> {mhlo.layout_mode = "default"}, tensor<1xf32> {mhlo.layout_mode = "default"}) {
    %cst = stablehlo.constant dense<"0x85948640CFFE97C0A6A1453FC4DFE63DFD25A94079597CC0F7EA1EC0D544DA3FCFB087406E86E7BF051EB4C0AA96433F5B1337C0415237405E70BD40BA06F1C0245A00409910B7BFF9641C40B54B58C029A3FEBFB2A55540EE9D30C03B245A40EE4CBEBF94600CC09D809340B3439240CA675040575477C0D897DABD67E0184086420E3FBC9F0D3F1E0C46C0AA84783E15FFBA40EC0F233FDE753740AE5C33C0004AC4BEF9A4BC3F0B431C3FAE1EBBBFC3029A3F05E11A40F7A52C407AD6D3BF1577DCBED2D7CCBF0D01F03F960C06408818274061F02B40C7AC64C021E65BC0CC7E9DBF193E893F15C9A63F2BD3954016079BC073D3013FE7635D3F15BF41C0454DAA4059EA86BFAB4A93BF658C854016AE014082619D4057EE0D3FC89C2FC09EF38A40A350B0BE3F38B93F320156C041737C40B70DEEC0112C83C05E3880BFD9930F40294386C0B36A10C0D884CA3FFEE614C0874A2FC0AFA05B3D31FFA0406E0F0640F30BC4BF4090A13F23E5F53FE1A4C140ABB58C4001417DBFD007D53F5C1CEC3DC4E149C0448834C097DC83BF4CDF00C0D637BC3E305D2EBE0FD5C8404C8300403F49EC3F000DDFC04F2D304051FFA8C01D828CBF368F903E29E9013F8EBD634080621A40375C13BF425FE7BE3E3D91C0F21BCAC015D970407AD93B39604DEABE5CD80EC044CAB6BE53FABA3EC420FA3D"> : tensor<1x125xf32>
    %cst_0 = stablehlo.constant dense<4.45492029> : tensor<1xf32>
    return %cst, %cst_0 : tensor<1x125xf32>, tensor<1xf32>
  }
  func.func private @expected() -> (tensor<1x125xf32> {mhlo.layout_mode = "default"}) {
    %cst = stablehlo.constant dense<"0x9D910A41CFFE97C0A6A1453FC4DFE63DFD25A94079597CC0F7EA1EC0D544DA3FCFB087406E86E7BF051EB4C0AA96433F5B1337C0415237405E70BD40BA06F1C0245A00409910B7BFF9641C40B54B58C029A3FEBFB2A55540EE9D30C03B245A40EE4CBEBF94600CC09D809340B3439240CA675040575477C0D897DABD67E0184086420E3FBC9F0D3F1E0C46C0AA84783E15FFBA40EC0F233FDE753740AE5C33C0004AC4BEF9A4BC3F0B431C3FAE1EBBBFC3029A3F05E11A40F7A52C407AD6D3BF1577DCBED2D7CCBF0D01F03F960C06408818274061F02B40C7AC64C021E65BC0CC7E9DBF193E893F15C9A63F2BD3954016079BC073D3013FE7635D3F15BF41C0454DAA4059EA86BFAB4A93BF658C854016AE014082619D4057EE0D3FC89C2FC09EF38A40A350B0BE3F38B93F320156C041737C40B70DEEC0112C83C05E3880BFD9930F40294386C0B36A10C0D884CA3FFEE614C0874A2FC0AFA05B3D31FFA0406E0F0640F30BC4BF4090A13F23E5F53FE1A4C140ABB58C4001417DBFD007D53F5C1CEC3DC4E149C0448834C097DC83BF4CDF00C0D637BC3E305D2EBE0FD5C8404C8300403F49EC3F000DDFC04F2D304051FFA8C01D828CBF368F903E29E9013F8EBD634080621A40375C13BF425FE7BE3E3D91C0F21BCAC015D970407AD93B39604DEABE5CD80EC044CAB6BE53FABA3EC420FA3D"> : tensor<1x125xf32>
    return %cst : tensor<1x125xf32>
  }
}
