// RUN: stablehlo-opt -inline %s | stablehlo-translate --interpret
// RUN: stablehlo-translate --serialize --target=current %s | stablehlo-translate --deserialize | stablehlo-opt > %t.0
// RUN: stablehlo-opt %s > %t.1
// RUN: diff %t.0 %t.1

module @jit_main attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main() -> (tensor<20x30xui8> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0 = call @inputs() : () -> tensor<20x30xui8>
    %1 = call @expected() : () -> tensor<20x30xui8>
    %2 = call @integer_pow(%0) : (tensor<20x30xui8>) -> tensor<20x30xui8>
    stablehlo.custom_call @check.expect_eq(%2, %1) {has_side_effect = true} : (tensor<20x30xui8>, tensor<20x30xui8>) -> ()
    return %2 : tensor<20x30xui8>
  }
  func.func private @inputs() -> (tensor<20x30xui8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<20x30xui8>
    return %c : tensor<20x30xui8>
  }
  func.func private @expected() -> (tensor<20x30xui8> {mhlo.layout_mode = "default"}) {
    %c = stablehlo.constant dense<"0xtensor<20x30xui8>
    return %c : tensor<20x30xui8>
  }
  func.func private @integer_pow(%arg0: tensor<20x30xui8>) -> tensor<20x30xui8> {
    %0 = stablehlo.multiply %arg0, %arg0 : tensor<20x30xui8>
    %1 = stablehlo.multiply %0, %0 : tensor<20x30xui8>
    return %1 : tensor<20x30xui8>
  }
}
