CMAKE_MINIMUM_REQUIRED(VERSION 3.20)
include(${LLCOMPILER_CMAKE_DIR}/cmake/functions.cmake)
##---------- options cache ----------##
unset(BUILD_SHARED_LIBS CACHE)
unset(TEST CACHE)
unset(STATIC_WINDOWS_RUNTIME CACHE)

##---------- options ----------##
# cant set to OFF
option(BUILD_SHARED_LIBS "build shared libs" OFF)
option(TEST "run test" ON)
option(STATIC_WINDOWS_RUNTIME "Use static (MT/MTd) Windows runtime" ON)

##---------- policy ----------##
NEW_POLICY(CMP0135)
NEW_POLICY(CMP0148)
NEW_POLICY(CMP0091)
NEW_POLICY(CMP0114)
NEW_POLICY(CMP0116)
# if(POLICY CMP0135)
#     cmake_policy(SET CMP0135 NEW)
# endif()
# if(POLICY CMP0148)
#     cmake_policy(SET CMP0148 NEW)
# endif()
# if(POLICY CMP0091)
#     cmake_policy(SET CMP0091 NEW)
# endif()
set(CMAKE_POLICY_DEFAULT_CMP0126 NEW)


##---------- cmake setting ----------##
project(LLCompiler LANGUAGES C CXX)
set(LLCOMPILER_VERSION 1.0)

##---------- compiler setting ----------##
set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 20)
set(CUDA_STANDARD 20)

set(CMAKE_DEBUG_POSTFIX d)
set(CMAKE_INSTALL_PREFIX ${INSTALL_DIR})

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/install")
#msvc编译器设置
if(MSVC)
    #去掉msvc4819警告
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4819>)
    if(STATIC_WINDOWS_RUNTIME)
        set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    endif()
endif()


##---------- define absolute path ----------##
cmake_path(APPEND LLCOMPILER_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR} "include")
cmake_path(APPEND LLCOMPILER_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} "src")
cmake_path(APPEND LLCOMPILER_CMAKE_DIR ${CMAKE_CURRENT_SOURCE_DIR} "cmake")
cmake_path(APPEND LLCOMPILER_TOOLS_DIR ${CMAKE_CURRENT_SOURCE_DIR} "tools")
cmake_path(APPEND LLCOMPILER_THIRDPARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR} "third_party")


##---------- define install absolute path ----------##
cmake_path(APPEND LLCOMPILER_INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR} "install")
cmake_path(APPEND LLCOMPILER_INSTALL_INCLUDE_DIR ${INSTALL_DIR} "include")
cmake_path(APPEND LLCOMPILER_INSTALL_LIB_DIR ${INSTALL_DIR} "lib")
cmake_path(APPEND LLCOMPILER_INSTALL_RUNTIME_DIR ${INSTALL_DIR} "bin")
cmake_path(APPEND LLCOMPILER_INSTALL_CMAKE_DIR ${INSTALL_DIR} "cmake")

##---------- external library ----------##
add_subdirectory(${LLCOMPILER_THIRDPARTY_DIR})
##---------- serach sorce file ----------##
file(GLOB_RECURSE LLCOMPILER_SOURCE_FILES ${LLCOMPILER_SOURCE_DIR}/*cpp )
##---------- compile llcimpiler ----------##
if(BUILD_SHARED_LIBS)
    add_library(llcompiler SHARED ${LLCOMPILER_SOURCE_FILES})
else()
    add_library(llcompiler STATIC ${LLCOMPILER_SOURCE_FILES})
endif()
set_target_properties(llcompiler PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
target_include_directories(llcompiler
    PRIVATE
    $<BUILD_INTERFACE:${LLCOMPILER_INCLUDE_DIR}>
    $<INSTALL_INTERFACE:${LLCOMPILER_INSTALL_DIR}>
)

target_link_libraries(llcompiler spdlog)
set_property(TARGET llcompiler PROPERTY VERSION ${LLCOMPILER_VERSION})

message(STATUS BUILD_SHARED_LIBS: ${BUILD_SHARED_LIBS})
message(STATUS STATIC_WINDOWS_RUNTIME: ${STATIC_WINDOWS_RUNTIME})
message(STATUS CMAKE_EXPORT_COMPILE_COMMANDS: ${CMAKE_EXPORT_COMPILE_COMMANDS})
message(STATUS CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH})

##---------- main ----------##
add_executable(main "${CMAKE_CURRENT_SOURCE_DIR}/main.cpp")
target_include_directories(main PRIVATE 
    $<BUILD_INTERFACE:${LLCOMPILER_INCLUDE_DIR}>
    $<INSTALL_INTERFACE:${LLCOMPILER_INSTALL_DIR}>
)
target_link_libraries(main PRIVATE llcompiler)



