##---------- options cache ----------##
unset(BUILD_SHARED_LIBS CACHE)
unset(TEST CACHE)
unset(STATIC_WINDOWS_RUNTIME CACHE)


##---------- options ----------##
# cant set to OFF
option(BUILD_SHARED_LIBS "build shared libs" OFF)
option(TEST "run test" ON)
# cant set to OFF
set(STATIC_WINDOWS_RUNTIME OFF)
option(STATIC_WINDOWS_RUNTIME "Use static (MT/MTd) Windows runtime" ON)

message(STATUS BUILD_SHARED_LIBS:${BUILD_SHARED_LIBS})
message(STATUS STATIC_WINDOWS_RUNTIME:${STATIC_WINDOWS_RUNTIME})
##---------- cmake setting ----------##
CMAKE_MINIMUM_REQUIRED(VERSION 3.25)
project(LLCompiler LANGUAGES C CXX)

##---------- policy ----------##
if (POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)
endif ()
if(POLICY CMP0148)
    cmake_policy(SET CMP0148 NEW)
endif () 
cmake_policy(SET CMP0091 NEW)

##---------- define absolute path ----------##
cmake_path(APPEND LLCOMPILER_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR} "include")
cmake_path(APPEND LLCOMPILER_SOUCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} "src")
cmake_path(APPEND LLCOMPILER_CMAKE_DIR ${CMAKE_CURRENT_SOURCE_DIR} "cmake")
cmake_path(APPEND LLCOMPILER_TOOLS_DIR ${CMAKE_CURRENT_SOURCE_DIR} "tools")
cmake_path(APPEND LLCOMPILER_THIRDPARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR} "thirdparty")


##---------- define install absolute path ----------##
cmake_path(APPEND LLCOMPILER_INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR} "install")
cmake_path(APPEND LLCOMPILER_INSTALL_INCLUDE_DIR ${INSTALL_DIR} "include")
cmake_path(APPEND LLCOMPILER_INSTALL_LIB_DIR ${INSTALL_DIR} "lib")
cmake_path(APPEND LLCOMPILER_INSTALL_RUNTIME_DIR ${INSTALL_DIR} "bin")
cmake_path(APPEND LLCOMPILER_INSTALL_CMAKE_DIR ${INSTALL_DIR} "cmake")


##---------- compiler setting ----------##
set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 20)
set(CUDA_STANDARD 20)

set(CMAKE_DEBUG_POSTFIX _d)
set(CMAKE_INSTALL_PREFIX ${INSTALL_DIR})

#msvc编译器设置
if(MSVC)
    #去掉msvc4819警告
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/wd4819>)
    if(STATIC_WINDOWS_RUNTIME)
        set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    endif()
    set(CMAKE_EXE_LINKER_FLAGS
      "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:msvcprt")
    # foreach(COMPILE_FLAG
    #     CMAKE_C_FLAGS_DEBUG
    #     CMAKE_C_FLAGS_RELEASE
    #     CMAKE_C_FLAGS_MINSIZEREL
    #     CMAKE_C_FLAGS_RELWITHDEBINFO 
    #     CMAKE_CXX_FLAGS_DEBUG
    #     CMAKE_CXX_FLAGS_RELEASE
    #     CMAKE_CXX_FLAGS_MINSIZEREL
    #     CMAKE_CXX_FLAGS_RELWITHDEBINFO
    # )
    #     if (${COMPILE_FLAG} MATCHES "/MD")
    #         string(REGEX REPLACE "/MD" "/MT" ${COMPILE_FLAG} "${${COMPILE_FLAG}}")
    #     else()
    #         set(Flags "")
    #         set(${COMPILE_FLAG} "${${COMPILE_FLAG}} /MT")
    #     endif()
    #     message("${${COMPILE_FLAG}}")
    # endforeach()
endif()

message(${CMAKE_C_FLAGS})
message(${CMAKE_C_FLAGS_DEBUG})
message(${CMAKE_C_FLAGS_RELEASE})
##---------- external library ----------##
add_subdirectory(${LLCOMPILER_THIRDPARTY_DIR})

##---------- main ----------##
add_executable(main "${CMAKE_CURRENT_SOURCE_DIR}/main.cpp")
target_include_directories(main PRIVATE $<BUILD_INTERFACE:${LLCOMPILER_INCLUDE_DIR}>
$<INSTALL_INTERFACE:${LLCOMPILER_INSTALL_DIR}>
)
target_link_libraries(main PRIVATE onnx)


