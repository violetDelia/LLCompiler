// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module attributes {builtin.gloabal_layout = "NCHW"} {
  memref.global "private" constant @__constant_1x10xf32 : memref<1x10xf32> = dense<[[-0.0448560268, 0.00779166119, 0.0681008175, 0.0299937408, -0.126409635, 0.14021875, -0.0552849025, -0.0493838154, 0.0843220502, -0.0545404144]]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_8x1x5x5xf32 : memref<8x1x5x5xf32> = dense<"0x{alignment = 64 : i64}
  memref.global "private" constant @__constant_16x8x5x5xf32 : memref<16x8x5x5xf32> = dense<"{alignment = 64 : i64}
  memref.global "private" constant @__constant_8xf32 : memref<8xf32> = dense<0.000000e+00> {alignment = 64 : i64}
  memref.global "private" constant @__constant_16xf32 : memref<16xf32> = dense<0.000000e+00> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x8x28x28xf32 : memref<1x8x28x28xf32> = dense<0.000000e+00> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x16x14x14xf32 : memref<1x16x14x14xf32> = dense<0.000000e+00> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x256x10xf32 : memref<1x256x10xf32> = dense<"0x{alignment = 64 : i64}
  memref.global "private" constant @__constant_1x8x1x1xf32 : memref<1x8x1x1xf32> = dense<[[[[-0.161539719]], [[-0.433835655]], [[0.091641359]], [[-0.0168522168]], [[-0.0650264397]], [[-0.131737873]], [[0.0204175506]], [[-0.121110231]]]]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x16x1x1xf32 : memref<1x16x1x1xf32> = dense<[[[[-0.0822488219]], [[-0.108868778]], [[-0.141039595]], [[-0.204869166]], [[-0.17913565]], [[-0.215438381]], [[-0.133805066]], [[-0.195724562]], [[-0.268250644]], [[-0.258212209]], [[-0.0761560649]], [[0.0132841459]], [[-0.00444464432]], [[-0.414740831]], [[-0.17879115]], [[-0.0386558883]]]]> {alignment = 64 : i64}
  func.func @main(%arg0: memref<1x1x28x28xf32, strided<[?, ?, ?, ?], offset: ?>>) -> memref<1x10xf32> {
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = memref.get_global @__constant_1x16x1x1xf32 : memref<1x16x1x1xf32>
    %1 = memref.get_global @__constant_1x8x1x1xf32 : memref<1x8x1x1xf32>
    %2 = memref.get_global @__constant_1x256x10xf32 : memref<1x256x10xf32>
    %3 = memref.get_global @__constant_16x8x5x5xf32 : memref<16x8x5x5xf32>
    %4 = memref.get_global @__constant_8x1x5x5xf32 : memref<8x1x5x5xf32>
    %5 = memref.get_global @__constant_1x10xf32 : memref<1x10xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x28x28x1xf32>
    %c0_1 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    cf.br ^bb1(%c0_1 : index)
  ^bb1(%6: index):  // 2 preds: ^bb0, ^bb11
    %7 = arith.cmpi slt, %6, %c1 : index
    cf.cond_br %7, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    %c0_3 = arith.constant 0 : index
    %c28 = arith.constant 28 : index
    %c1_4 = arith.constant 1 : index
    cf.br ^bb3(%c0_3 : index)
  ^bb3(%8: index):  // 2 preds: ^bb2, ^bb10
    %9 = arith.cmpi slt, %8, %c28 : index
    cf.cond_br %9, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    %c0_5 = arith.constant 0 : index
    %c28_6 = arith.constant 28 : index
    %c1_7 = arith.constant 1 : index
    cf.br ^bb5(%c0_5 : index)
  ^bb5(%10: index):  // 2 preds: ^bb4, ^bb9
    %11 = arith.cmpi slt, %10, %c28_6 : index
    cf.cond_br %11, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    %c0_8 = arith.constant 0 : index
    %c1_9 = arith.constant 1 : index
    %c1_10 = arith.constant 1 : index
    cf.br ^bb7(%c0_8 : index)
  ^bb7(%12: index):  // 2 preds: ^bb6, ^bb8
    %13 = arith.cmpi slt, %12, %c1_9 : index
    cf.cond_br %13, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %14 = memref.load %arg0[%6, %12, %8, %10] : memref<1x1x28x28xf32, strided<[?, ?, ?, ?], offset: ?>>
    memref.store %14, %alloc[%6, %8, %10, %12] : memref<1x28x28x1xf32>
    %15 = arith.addi %12, %c1_10 : index
    cf.br ^bb7(%15 : index)
  ^bb9:  // pred: ^bb7
    %16 = arith.addi %10, %c1_7 : index
    cf.br ^bb5(%16 : index)
  ^bb10:  // pred: ^bb5
    %17 = arith.addi %8, %c1_4 : index
    cf.br ^bb3(%17 : index)
  ^bb11:  // pred: ^bb3
    %18 = arith.addi %6, %c1_2 : index
    cf.br ^bb1(%18 : index)
  ^bb12:  // pred: ^bb1
    %alloc_11 = memref.alloc() {alignment = 64 : i64} : memref<8x5x5x1xf32>
    %c0_12 = arith.constant 0 : index
    %c8 = arith.constant 8 : index
    %c1_13 = arith.constant 1 : index
    cf.br ^bb13(%c0_12 : index)
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb23
    %20 = arith.cmpi slt, %19, %c8 : index
    cf.cond_br %20, ^bb14, ^bb24
  ^bb14:  // pred: ^bb13
    %c0_14 = arith.constant 0 : index
    %c5 = arith.constant 5 : index
    %c1_15 = arith.constant 1 : index
    cf.br ^bb15(%c0_14 : index)
  ^bb15(%21: index):  // 2 preds: ^bb14, ^bb22
    %22 = arith.cmpi slt, %21, %c5 : index
    cf.cond_br %22, ^bb16, ^bb23
  ^bb16:  // pred: ^bb15
    %c0_16 = arith.constant 0 : index
    %c5_17 = arith.constant 5 : index
    %c1_18 = arith.constant 1 : index
    cf.br ^bb17(%c0_16 : index)
  ^bb17(%23: index):  // 2 preds: ^bb16, ^bb21
    %24 = arith.cmpi slt, %23, %c5_17 : index
    cf.cond_br %24, ^bb18, ^bb22
  ^bb18:  // pred: ^bb17
    %c0_19 = arith.constant 0 : index
    %c1_20 = arith.constant 1 : index
    %c1_21 = arith.constant 1 : index
    cf.br ^bb19(%c0_19 : index)
  ^bb19(%25: index):  // 2 preds: ^bb18, ^bb20
    %26 = arith.cmpi slt, %25, %c1_20 : index
    cf.cond_br %26, ^bb20, ^bb21
  ^bb20:  // pred: ^bb19
    %27 = memref.load %4[%19, %25, %21, %23] : memref<8x1x5x5xf32>
    memref.store %27, %alloc_11[%19, %21, %23, %25] : memref<8x5x5x1xf32>
    %28 = arith.addi %25, %c1_21 : index
    cf.br ^bb19(%28 : index)
  ^bb21:  // pred: ^bb19
    %29 = arith.addi %23, %c1_18 : index
    cf.br ^bb17(%29 : index)
  ^bb22:  // pred: ^bb17
    %30 = arith.addi %21, %c1_15 : index
    cf.br ^bb15(%30 : index)
  ^bb23:  // pred: ^bb15
    %31 = arith.addi %19, %c1_13 : index
    cf.br ^bb13(%31 : index)
  ^bb24:  // pred: ^bb13
    %alloc_22 = memref.alloc() {alignment = 64 : i64} : memref<1x32x32x1xf32>
    %c0_23 = arith.constant 0 : index
    %c1_24 = arith.constant 1 : index
    %c1_25 = arith.constant 1 : index
    cf.br ^bb25(%c0_23 : index)
  ^bb25(%32: index):  // 2 preds: ^bb24, ^bb35
    %33 = arith.cmpi slt, %32, %c1_24 : index
    cf.cond_br %33, ^bb26, ^bb36
  ^bb26:  // pred: ^bb25
    %c0_26 = arith.constant 0 : index
    %c32 = arith.constant 32 : index
    %c1_27 = arith.constant 1 : index
    cf.br ^bb27(%c0_26 : index)
  ^bb27(%34: index):  // 2 preds: ^bb26, ^bb34
    %35 = arith.cmpi slt, %34, %c32 : index
    cf.cond_br %35, ^bb28, ^bb35
  ^bb28:  // pred: ^bb27
    %c0_28 = arith.constant 0 : index
    %c32_29 = arith.constant 32 : index
    %c1_30 = arith.constant 1 : index
    cf.br ^bb29(%c0_28 : index)
  ^bb29(%36: index):  // 2 preds: ^bb28, ^bb33
    %37 = arith.cmpi slt, %36, %c32_29 : index
    cf.cond_br %37, ^bb30, ^bb34
  ^bb30:  // pred: ^bb29
    %c0_31 = arith.constant 0 : index
    %c1_32 = arith.constant 1 : index
    %c1_33 = arith.constant 1 : index
    cf.br ^bb31(%c0_31 : index)
  ^bb31(%38: index):  // 2 preds: ^bb30, ^bb32
    %39 = arith.cmpi slt, %38, %c1_32 : index
    cf.cond_br %39, ^bb32, ^bb33
  ^bb32:  // pred: ^bb31
    memref.store %cst_0, %alloc_22[%32, %34, %36, %38] : memref<1x32x32x1xf32>
    %40 = arith.addi %38, %c1_33 : index
    cf.br ^bb31(%40 : index)
  ^bb33:  // pred: ^bb31
    %41 = arith.addi %36, %c1_30 : index
    cf.br ^bb29(%41 : index)
  ^bb34:  // pred: ^bb29
    %42 = arith.addi %34, %c1_27 : index
    cf.br ^bb27(%42 : index)
  ^bb35:  // pred: ^bb27
    %43 = arith.addi %32, %c1_25 : index
    cf.br ^bb25(%43 : index)
  ^bb36:  // pred: ^bb25
    %subview = memref.subview %alloc_22[0, 2, 2, 0] [1, 28, 28, 1] [1, 1, 1, 1] : memref<1x32x32x1xf32> to memref<1x28x28x1xf32, strided<[1024, 32, 1, 1], offset: 66>>
    memref.copy %alloc, %subview : memref<1x28x28x1xf32> to memref<1x28x28x1xf32, strided<[1024, 32, 1, 1], offset: 66>>
    memref.dealloc %alloc : memref<1x28x28x1xf32>
    %alloc_34 = memref.alloc() {alignment = 64 : i64} : memref<1x28x28x8xf32>
    %c0_35 = arith.constant 0 : index
    %c1_36 = arith.constant 1 : index
    %c1_37 = arith.constant 1 : index
    cf.br ^bb37(%c0_35 : index)
  ^bb37(%44: index):  // 2 preds: ^bb36, ^bb47
    %45 = arith.cmpi slt, %44, %c1_36 : index
    cf.cond_br %45, ^bb38, ^bb48
  ^bb38:  // pred: ^bb37
    %c0_38 = arith.constant 0 : index
    %c28_39 = arith.constant 28 : index
    %c1_40 = arith.constant 1 : index
    cf.br ^bb39(%c0_38 : index)
  ^bb39(%46: index):  // 2 preds: ^bb38, ^bb46
    %47 = arith.cmpi slt, %46, %c28_39 : index
    cf.cond_br %47, ^bb40, ^bb47
  ^bb40:  // pred: ^bb39
    %c0_41 = arith.constant 0 : index
    %c28_42 = arith.constant 28 : index
    %c1_43 = arith.constant 1 : index
    cf.br ^bb41(%c0_41 : index)
  ^bb41(%48: index):  // 2 preds: ^bb40, ^bb45
    %49 = arith.cmpi slt, %48, %c28_42 : index
    cf.cond_br %49, ^bb42, ^bb46
  ^bb42:  // pred: ^bb41
    %c0_44 = arith.constant 0 : index
    %c8_45 = arith.constant 8 : index
    %c1_46 = arith.constant 1 : index
    cf.br ^bb43(%c0_44 : index)
  ^bb43(%50: index):  // 2 preds: ^bb42, ^bb44
    %51 = arith.cmpi slt, %50, %c8_45 : index
    cf.cond_br %51, ^bb44, ^bb45
  ^bb44:  // pred: ^bb43
    memref.store %cst_0, %alloc_34[%44, %46, %48, %50] : memref<1x28x28x8xf32>
    %52 = arith.addi %50, %c1_46 : index
    cf.br ^bb43(%52 : index)
  ^bb45:  // pred: ^bb43
    %53 = arith.addi %48, %c1_43 : index
    cf.br ^bb41(%53 : index)
  ^bb46:  // pred: ^bb41
    %54 = arith.addi %46, %c1_40 : index
    cf.br ^bb39(%54 : index)
  ^bb47:  // pred: ^bb39
    %55 = arith.addi %44, %c1_37 : index
    cf.br ^bb37(%55 : index)
  ^bb48:  // pred: ^bb37
    %c0_47 = arith.constant 0 : index
    %c1_48 = arith.constant 1 : index
    %c1_49 = arith.constant 1 : index
    cf.br ^bb49(%c0_47 : index)
  ^bb49(%56: index):  // 2 preds: ^bb48, ^bb68
    %57 = arith.cmpi slt, %56, %c1_48 : index
    cf.cond_br %57, ^bb50, ^bb69
  ^bb50:  // pred: ^bb49
    %c0_50 = arith.constant 0 : index
    %c28_51 = arith.constant 28 : index
    %c1_52 = arith.constant 1 : index
    cf.br ^bb51(%c0_50 : index)
  ^bb51(%58: index):  // 2 preds: ^bb50, ^bb67
    %59 = arith.cmpi slt, %58, %c28_51 : index
    cf.cond_br %59, ^bb52, ^bb68
  ^bb52:  // pred: ^bb51
    %c0_53 = arith.constant 0 : index
    %c28_54 = arith.constant 28 : index
    %c1_55 = arith.constant 1 : index
    cf.br ^bb53(%c0_53 : index)
  ^bb53(%60: index):  // 2 preds: ^bb52, ^bb66
    %61 = arith.cmpi slt, %60, %c28_54 : index
    cf.cond_br %61, ^bb54, ^bb67
  ^bb54:  // pred: ^bb53
    %c0_56 = arith.constant 0 : index
    %c8_57 = arith.constant 8 : index
    %c1_58 = arith.constant 1 : index
    cf.br ^bb55(%c0_56 : index)
  ^bb55(%62: index):  // 2 preds: ^bb54, ^bb65
    %63 = arith.cmpi slt, %62, %c8_57 : index
    cf.cond_br %63, ^bb56, ^bb66
  ^bb56:  // pred: ^bb55
    %c0_59 = arith.constant 0 : index
    %c5_60 = arith.constant 5 : index
    %c1_61 = arith.constant 1 : index
    cf.br ^bb57(%c0_59 : index)
  ^bb57(%64: index):  // 2 preds: ^bb56, ^bb64
    %65 = arith.cmpi slt, %64, %c5_60 : index
    cf.cond_br %65, ^bb58, ^bb65
  ^bb58:  // pred: ^bb57
    %c0_62 = arith.constant 0 : index
    %c5_63 = arith.constant 5 : index
    %c1_64 = arith.constant 1 : index
    cf.br ^bb59(%c0_62 : index)
  ^bb59(%66: index):  // 2 preds: ^bb58, ^bb63
    %67 = arith.cmpi slt, %66, %c5_63 : index
    cf.cond_br %67, ^bb60, ^bb64
  ^bb60:  // pred: ^bb59
    %c0_65 = arith.constant 0 : index
    %c1_66 = arith.constant 1 : index
    %c1_67 = arith.constant 1 : index
    cf.br ^bb61(%c0_65 : index)
  ^bb61(%68: index):  // 2 preds: ^bb60, ^bb62
    %69 = arith.cmpi slt, %68, %c1_66 : index
    cf.cond_br %69, ^bb62, ^bb63
  ^bb62:  // pred: ^bb61
    %70 = arith.addi %58, %64 : index
    %71 = arith.addi %60, %66 : index
    %72 = memref.load %alloc_22[%56, %70, %71, %68] : memref<1x32x32x1xf32>
    %73 = memref.load %alloc_11[%62, %64, %66, %68] : memref<8x5x5x1xf32>
    %74 = memref.load %alloc_34[%56, %58, %60, %62] : memref<1x28x28x8xf32>
    %75 = arith.mulf %72, %73 : f32
    %76 = arith.addf %74, %75 : f32
    memref.store %76, %alloc_34[%56, %58, %60, %62] : memref<1x28x28x8xf32>
    %77 = arith.addi %68, %c1_67 : index
    cf.br ^bb61(%77 : index)
  ^bb63:  // pred: ^bb61
    %78 = arith.addi %66, %c1_64 : index
    cf.br ^bb59(%78 : index)
  ^bb64:  // pred: ^bb59
    %79 = arith.addi %64, %c1_61 : index
    cf.br ^bb57(%79 : index)
  ^bb65:  // pred: ^bb57
    %80 = arith.addi %62, %c1_58 : index
    cf.br ^bb55(%80 : index)
  ^bb66:  // pred: ^bb55
    %81 = arith.addi %60, %c1_55 : index
    cf.br ^bb53(%81 : index)
  ^bb67:  // pred: ^bb53
    %82 = arith.addi %58, %c1_52 : index
    cf.br ^bb51(%82 : index)
  ^bb68:  // pred: ^bb51
    %83 = arith.addi %56, %c1_49 : index
    cf.br ^bb49(%83 : index)
  ^bb69:  // pred: ^bb49
    memref.dealloc %alloc_22 : memref<1x32x32x1xf32>
    memref.dealloc %alloc_11 : memref<8x5x5x1xf32>
    %alloc_68 = memref.alloc() {alignment = 64 : i64} : memref<1x8x28x28xf32>
    %c0_69 = arith.constant 0 : index
    %c1_70 = arith.constant 1 : index
    %c1_71 = arith.constant 1 : index
    cf.br ^bb70(%c0_69 : index)
  ^bb70(%84: index):  // 2 preds: ^bb69, ^bb80
    %85 = arith.cmpi slt, %84, %c1_70 : index
    cf.cond_br %85, ^bb71, ^bb81
  ^bb71:  // pred: ^bb70
    %c0_72 = arith.constant 0 : index
    %c8_73 = arith.constant 8 : index
    %c1_74 = arith.constant 1 : index
    cf.br ^bb72(%c0_72 : index)
  ^bb72(%86: index):  // 2 preds: ^bb71, ^bb79
    %87 = arith.cmpi slt, %86, %c8_73 : index
    cf.cond_br %87, ^bb73, ^bb80
  ^bb73:  // pred: ^bb72
    %c0_75 = arith.constant 0 : index
    %c28_76 = arith.constant 28 : index
    %c1_77 = arith.constant 1 : index
    cf.br ^bb74(%c0_75 : index)
  ^bb74(%88: index):  // 2 preds: ^bb73, ^bb78
    %89 = arith.cmpi slt, %88, %c28_76 : index
    cf.cond_br %89, ^bb75, ^bb79
  ^bb75:  // pred: ^bb74
    %c0_78 = arith.constant 0 : index
    %c28_79 = arith.constant 28 : index
    %c1_80 = arith.constant 1 : index
    cf.br ^bb76(%c0_78 : index)
  ^bb76(%90: index):  // 2 preds: ^bb75, ^bb77
    %91 = arith.cmpi slt, %90, %c28_79 : index
    cf.cond_br %91, ^bb77, ^bb78
  ^bb77:  // pred: ^bb76
    %92 = memref.load %alloc_34[%84, %88, %90, %86] : memref<1x28x28x8xf32>
    memref.store %92, %alloc_68[%84, %86, %88, %90] : memref<1x8x28x28xf32>
    %93 = arith.addi %90, %c1_80 : index
    cf.br ^bb76(%93 : index)
  ^bb78:  // pred: ^bb76
    %94 = arith.addi %88, %c1_77 : index
    cf.br ^bb74(%94 : index)
  ^bb79:  // pred: ^bb74
    %95 = arith.addi %86, %c1_74 : index
    cf.br ^bb72(%95 : index)
  ^bb80:  // pred: ^bb72
    %96 = arith.addi %84, %c1_71 : index
    cf.br ^bb70(%96 : index)
  ^bb81:  // pred: ^bb70
    memref.dealloc %alloc_34 : memref<1x28x28x8xf32>
    %alloc_81 = memref.alloc() {alignment = 64 : i64} : memref<1x8x28x28xf32>
    %c0_82 = arith.constant 0 : index
    %c1_83 = arith.constant 1 : index
    %c1_84 = arith.constant 1 : index
    cf.br ^bb82(%c0_82 : index)
  ^bb82(%97: index):  // 2 preds: ^bb81, ^bb92
    %98 = arith.cmpi slt, %97, %c1_83 : index
    cf.cond_br %98, ^bb83, ^bb93
  ^bb83:  // pred: ^bb82
    %c0_85 = arith.constant 0 : index
    %c8_86 = arith.constant 8 : index
    %c1_87 = arith.constant 1 : index
    cf.br ^bb84(%c0_85 : index)
  ^bb84(%99: index):  // 2 preds: ^bb83, ^bb91
    %100 = arith.cmpi slt, %99, %c8_86 : index
    cf.cond_br %100, ^bb85, ^bb92
  ^bb85:  // pred: ^bb84
    %c0_88 = arith.constant 0 : index
    %c28_89 = arith.constant 28 : index
    %c1_90 = arith.constant 1 : index
    cf.br ^bb86(%c0_88 : index)
  ^bb86(%101: index):  // 2 preds: ^bb85, ^bb90
    %102 = arith.cmpi slt, %101, %c28_89 : index
    cf.cond_br %102, ^bb87, ^bb91
  ^bb87:  // pred: ^bb86
    %c0_91 = arith.constant 0 : index
    %c28_92 = arith.constant 28 : index
    %c1_93 = arith.constant 1 : index
    cf.br ^bb88(%c0_91 : index)
  ^bb88(%103: index):  // 2 preds: ^bb87, ^bb89
    %104 = arith.cmpi slt, %103, %c28_92 : index
    cf.cond_br %104, ^bb89, ^bb90
  ^bb89:  // pred: ^bb88
    %105 = memref.load %alloc_68[%c0, %99, %101, %103] : memref<1x8x28x28xf32>
    %106 = memref.load %1[%c0, %99, %c0, %c0] : memref<1x8x1x1xf32>
    %107 = arith.addf %105, %106 : f32
    memref.store %107, %alloc_81[%97, %99, %101, %103] : memref<1x8x28x28xf32>
    %108 = arith.addi %103, %c1_93 : index
    cf.br ^bb88(%108 : index)
  ^bb90:  // pred: ^bb88
    %109 = arith.addi %101, %c1_90 : index
    cf.br ^bb86(%109 : index)
  ^bb91:  // pred: ^bb86
    %110 = arith.addi %99, %c1_87 : index
    cf.br ^bb84(%110 : index)
  ^bb92:  // pred: ^bb84
    %111 = arith.addi %97, %c1_84 : index
    cf.br ^bb82(%111 : index)
  ^bb93:  // pred: ^bb82
    memref.dealloc %alloc_68 : memref<1x8x28x28xf32>
    %alloc_94 = memref.alloc() {alignment = 64 : i64} : memref<1x8x28x28xf32>
    %c0_95 = arith.constant 0 : index
    %c1_96 = arith.constant 1 : index
    %c1_97 = arith.constant 1 : index
    cf.br ^bb94(%c0_95 : index)
  ^bb94(%112: index):  // 2 preds: ^bb93, ^bb104
    %113 = arith.cmpi slt, %112, %c1_96 : index
    cf.cond_br %113, ^bb95, ^bb105
  ^bb95:  // pred: ^bb94
    %c0_98 = arith.constant 0 : index
    %c8_99 = arith.constant 8 : index
    %c1_100 = arith.constant 1 : index
    cf.br ^bb96(%c0_98 : index)
  ^bb96(%114: index):  // 2 preds: ^bb95, ^bb103
    %115 = arith.cmpi slt, %114, %c8_99 : index
    cf.cond_br %115, ^bb97, ^bb104
  ^bb97:  // pred: ^bb96
    %c0_101 = arith.constant 0 : index
    %c28_102 = arith.constant 28 : index
    %c1_103 = arith.constant 1 : index
    cf.br ^bb98(%c0_101 : index)
  ^bb98(%116: index):  // 2 preds: ^bb97, ^bb102
    %117 = arith.cmpi slt, %116, %c28_102 : index
    cf.cond_br %117, ^bb99, ^bb103
  ^bb99:  // pred: ^bb98
    %c0_104 = arith.constant 0 : index
    %c28_105 = arith.constant 28 : index
    %c1_106 = arith.constant 1 : index
    cf.br ^bb100(%c0_104 : index)
  ^bb100(%118: index):  // 2 preds: ^bb99, ^bb101
    %119 = arith.cmpi slt, %118, %c28_105 : index
    cf.cond_br %119, ^bb101, ^bb102
  ^bb101:  // pred: ^bb100
    %120 = memref.load %alloc_81[%c0, %114, %116, %118] : memref<1x8x28x28xf32>
    %121 = arith.cmpf ugt, %120, %cst_0 : f32
    %122 = arith.select %121, %120, %cst_0 : f32
    %123 = arith.cmpf uno, %cst_0, %cst_0 : f32
    %124 = arith.select %123, %cst_0, %122 : f32
    memref.store %124, %alloc_94[%112, %114, %116, %118] : memref<1x8x28x28xf32>
    %125 = arith.addi %118, %c1_106 : index
    cf.br ^bb100(%125 : index)
  ^bb102:  // pred: ^bb100
    %126 = arith.addi %116, %c1_103 : index
    cf.br ^bb98(%126 : index)
  ^bb103:  // pred: ^bb98
    %127 = arith.addi %114, %c1_100 : index
    cf.br ^bb96(%127 : index)
  ^bb104:  // pred: ^bb96
    %128 = arith.addi %112, %c1_97 : index
    cf.br ^bb94(%128 : index)
  ^bb105:  // pred: ^bb94
    memref.dealloc %alloc_81 : memref<1x8x28x28xf32>
    %alloc_107 = memref.alloc() {alignment = 64 : i64} : memref<1x28x28x8xf32>
    %c0_108 = arith.constant 0 : index
    %c1_109 = arith.constant 1 : index
    %c1_110 = arith.constant 1 : index
    cf.br ^bb106(%c0_108 : index)
  ^bb106(%129: index):  // 2 preds: ^bb105, ^bb116
    %130 = arith.cmpi slt, %129, %c1_109 : index
    cf.cond_br %130, ^bb107, ^bb117
  ^bb107:  // pred: ^bb106
    %c0_111 = arith.constant 0 : index
    %c28_112 = arith.constant 28 : index
    %c1_113 = arith.constant 1 : index
    cf.br ^bb108(%c0_111 : index)
  ^bb108(%131: index):  // 2 preds: ^bb107, ^bb115
    %132 = arith.cmpi slt, %131, %c28_112 : index
    cf.cond_br %132, ^bb109, ^bb116
  ^bb109:  // pred: ^bb108
    %c0_114 = arith.constant 0 : index
    %c28_115 = arith.constant 28 : index
    %c1_116 = arith.constant 1 : index
    cf.br ^bb110(%c0_114 : index)
  ^bb110(%133: index):  // 2 preds: ^bb109, ^bb114
    %134 = arith.cmpi slt, %133, %c28_115 : index
    cf.cond_br %134, ^bb111, ^bb115
  ^bb111:  // pred: ^bb110
    %c0_117 = arith.constant 0 : index
    %c8_118 = arith.constant 8 : index
    %c1_119 = arith.constant 1 : index
    cf.br ^bb112(%c0_117 : index)
  ^bb112(%135: index):  // 2 preds: ^bb111, ^bb113
    %136 = arith.cmpi slt, %135, %c8_118 : index
    cf.cond_br %136, ^bb113, ^bb114
  ^bb113:  // pred: ^bb112
    %137 = memref.load %alloc_94[%129, %135, %131, %133] : memref<1x8x28x28xf32>
    memref.store %137, %alloc_107[%129, %131, %133, %135] : memref<1x28x28x8xf32>
    %138 = arith.addi %135, %c1_119 : index
    cf.br ^bb112(%138 : index)
  ^bb114:  // pred: ^bb112
    %139 = arith.addi %133, %c1_116 : index
    cf.br ^bb110(%139 : index)
  ^bb115:  // pred: ^bb110
    %140 = arith.addi %131, %c1_113 : index
    cf.br ^bb108(%140 : index)
  ^bb116:  // pred: ^bb108
    %141 = arith.addi %129, %c1_110 : index
    cf.br ^bb106(%141 : index)
  ^bb117:  // pred: ^bb106
    memref.dealloc %alloc_94 : memref<1x8x28x28xf32>
    %alloc_120 = memref.alloc() {alignment = 64 : i64} : memref<1x14x14x8xf32>
    %c0_121 = arith.constant 0 : index
    %c1_122 = arith.constant 1 : index
    %c1_123 = arith.constant 1 : index
    cf.br ^bb118(%c0_121 : index)
  ^bb118(%142: index):  // 2 preds: ^bb117, ^bb128
    %143 = arith.cmpi slt, %142, %c1_122 : index
    cf.cond_br %143, ^bb119, ^bb129
  ^bb119:  // pred: ^bb118
    %c0_124 = arith.constant 0 : index
    %c14 = arith.constant 14 : index
    %c1_125 = arith.constant 1 : index
    cf.br ^bb120(%c0_124 : index)
  ^bb120(%144: index):  // 2 preds: ^bb119, ^bb127
    %145 = arith.cmpi slt, %144, %c14 : index
    cf.cond_br %145, ^bb121, ^bb128
  ^bb121:  // pred: ^bb120
    %c0_126 = arith.constant 0 : index
    %c14_127 = arith.constant 14 : index
    %c1_128 = arith.constant 1 : index
    cf.br ^bb122(%c0_126 : index)
  ^bb122(%146: index):  // 2 preds: ^bb121, ^bb126
    %147 = arith.cmpi slt, %146, %c14_127 : index
    cf.cond_br %147, ^bb123, ^bb127
  ^bb123:  // pred: ^bb122
    %c0_129 = arith.constant 0 : index
    %c8_130 = arith.constant 8 : index
    %c1_131 = arith.constant 1 : index
    cf.br ^bb124(%c0_129 : index)
  ^bb124(%148: index):  // 2 preds: ^bb123, ^bb125
    %149 = arith.cmpi slt, %148, %c8_130 : index
    cf.cond_br %149, ^bb125, ^bb126
  ^bb125:  // pred: ^bb124
    memref.store %cst, %alloc_120[%142, %144, %146, %148] : memref<1x14x14x8xf32>
    %150 = arith.addi %148, %c1_131 : index
    cf.br ^bb124(%150 : index)
  ^bb126:  // pred: ^bb124
    %151 = arith.addi %146, %c1_128 : index
    cf.br ^bb122(%151 : index)
  ^bb127:  // pred: ^bb122
    %152 = arith.addi %144, %c1_125 : index
    cf.br ^bb120(%152 : index)
  ^bb128:  // pred: ^bb120
    %153 = arith.addi %142, %c1_123 : index
    cf.br ^bb118(%153 : index)
  ^bb129:  // pred: ^bb118
    %c0_132 = arith.constant 0 : index
    %c1_133 = arith.constant 1 : index
    %c1_134 = arith.constant 1 : index
    cf.br ^bb130(%c0_132 : index)
  ^bb130(%154: index):  // 2 preds: ^bb129, ^bb146
    %155 = arith.cmpi slt, %154, %c1_133 : index
    cf.cond_br %155, ^bb131, ^bb147
  ^bb131:  // pred: ^bb130
    %c0_135 = arith.constant 0 : index
    %c14_136 = arith.constant 14 : index
    %c1_137 = arith.constant 1 : index
    cf.br ^bb132(%c0_135 : index)
  ^bb132(%156: index):  // 2 preds: ^bb131, ^bb145
    %157 = arith.cmpi slt, %156, %c14_136 : index
    cf.cond_br %157, ^bb133, ^bb146
  ^bb133:  // pred: ^bb132
    %c0_138 = arith.constant 0 : index
    %c14_139 = arith.constant 14 : index
    %c1_140 = arith.constant 1 : index
    cf.br ^bb134(%c0_138 : index)
  ^bb134(%158: index):  // 2 preds: ^bb133, ^bb144
    %159 = arith.cmpi slt, %158, %c14_139 : index
    cf.cond_br %159, ^bb135, ^bb145
  ^bb135:  // pred: ^bb134
    %c0_141 = arith.constant 0 : index
    %c8_142 = arith.constant 8 : index
    %c1_143 = arith.constant 1 : index
    cf.br ^bb136(%c0_141 : index)
  ^bb136(%160: index):  // 2 preds: ^bb135, ^bb143
    %161 = arith.cmpi slt, %160, %c8_142 : index
    cf.cond_br %161, ^bb137, ^bb144
  ^bb137:  // pred: ^bb136
    %c0_144 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1_145 = arith.constant 1 : index
    cf.br ^bb138(%c0_144 : index)
  ^bb138(%162: index):  // 2 preds: ^bb137, ^bb142
    %163 = arith.cmpi slt, %162, %c2 : index
    cf.cond_br %163, ^bb139, ^bb143
  ^bb139:  // pred: ^bb138
    %c0_146 = arith.constant 0 : index
    %c2_147 = arith.constant 2 : index
    %c1_148 = arith.constant 1 : index
    cf.br ^bb140(%c0_146 : index)
  ^bb140(%164: index):  // 2 preds: ^bb139, ^bb141
    %165 = arith.cmpi slt, %164, %c2_147 : index
    cf.cond_br %165, ^bb141, ^bb142
  ^bb141:  // pred: ^bb140
    %c2_149 = arith.constant 2 : index
    %166 = arith.muli %156, %c2_149 : index
    %167 = arith.addi %166, %162 : index
    %c2_150 = arith.constant 2 : index
    %168 = arith.muli %158, %c2_150 : index
    %169 = arith.addi %168, %164 : index
    %170 = memref.load %alloc_107[%154, %167, %169, %160] : memref<1x28x28x8xf32>
    %171 = memref.load %alloc_120[%154, %156, %158, %160] : memref<1x14x14x8xf32>
    %172 = arith.cmpf ugt, %171, %170 : f32
    %173 = arith.select %172, %171, %170 : f32
    %174 = arith.cmpf uno, %170, %170 : f32
    %175 = arith.select %174, %170, %173 : f32
    memref.store %175, %alloc_120[%154, %156, %158, %160] : memref<1x14x14x8xf32>
    %176 = arith.addi %164, %c1_148 : index
    cf.br ^bb140(%176 : index)
  ^bb142:  // pred: ^bb140
    %177 = arith.addi %162, %c1_145 : index
    cf.br ^bb138(%177 : index)
  ^bb143:  // pred: ^bb138
    %178 = arith.addi %160, %c1_143 : index
    cf.br ^bb136(%178 : index)
  ^bb144:  // pred: ^bb136
    %179 = arith.addi %158, %c1_140 : index
    cf.br ^bb134(%179 : index)
  ^bb145:  // pred: ^bb134
    %180 = arith.addi %156, %c1_137 : index
    cf.br ^bb132(%180 : index)
  ^bb146:  // pred: ^bb132
    %181 = arith.addi %154, %c1_134 : index
    cf.br ^bb130(%181 : index)
  ^bb147:  // pred: ^bb130
    memref.dealloc %alloc_107 : memref<1x28x28x8xf32>
    %alloc_151 = memref.alloc() {alignment = 64 : i64} : memref<1x8x14x14xf32>
    %c0_152 = arith.constant 0 : index
    %c1_153 = arith.constant 1 : index
    %c1_154 = arith.constant 1 : index
    cf.br ^bb148(%c0_152 : index)
  ^bb148(%182: index):  // 2 preds: ^bb147, ^bb158
    %183 = arith.cmpi slt, %182, %c1_153 : index
    cf.cond_br %183, ^bb149, ^bb159
  ^bb149:  // pred: ^bb148
    %c0_155 = arith.constant 0 : index
    %c8_156 = arith.constant 8 : index
    %c1_157 = arith.constant 1 : index
    cf.br ^bb150(%c0_155 : index)
  ^bb150(%184: index):  // 2 preds: ^bb149, ^bb157
    %185 = arith.cmpi slt, %184, %c8_156 : index
    cf.cond_br %185, ^bb151, ^bb158
  ^bb151:  // pred: ^bb150
    %c0_158 = arith.constant 0 : index
    %c14_159 = arith.constant 14 : index
    %c1_160 = arith.constant 1 : index
    cf.br ^bb152(%c0_158 : index)
  ^bb152(%186: index):  // 2 preds: ^bb151, ^bb156
    %187 = arith.cmpi slt, %186, %c14_159 : index
    cf.cond_br %187, ^bb153, ^bb157
  ^bb153:  // pred: ^bb152
    %c0_161 = arith.constant 0 : index
    %c14_162 = arith.constant 14 : index
    %c1_163 = arith.constant 1 : index
    cf.br ^bb154(%c0_161 : index)
  ^bb154(%188: index):  // 2 preds: ^bb153, ^bb155
    %189 = arith.cmpi slt, %188, %c14_162 : index
    cf.cond_br %189, ^bb155, ^bb156
  ^bb155:  // pred: ^bb154
    %190 = memref.load %alloc_120[%182, %186, %188, %184] : memref<1x14x14x8xf32>
    memref.store %190, %alloc_151[%182, %184, %186, %188] : memref<1x8x14x14xf32>
    %191 = arith.addi %188, %c1_163 : index
    cf.br ^bb154(%191 : index)
  ^bb156:  // pred: ^bb154
    %192 = arith.addi %186, %c1_160 : index
    cf.br ^bb152(%192 : index)
  ^bb157:  // pred: ^bb152
    %193 = arith.addi %184, %c1_157 : index
    cf.br ^bb150(%193 : index)
  ^bb158:  // pred: ^bb150
    %194 = arith.addi %182, %c1_154 : index
    cf.br ^bb148(%194 : index)
  ^bb159:  // pred: ^bb148
    memref.dealloc %alloc_120 : memref<1x14x14x8xf32>
    %alloc_164 = memref.alloc() {alignment = 64 : i64} : memref<1x14x14x8xf32>
    %c0_165 = arith.constant 0 : index
    %c1_166 = arith.constant 1 : index
    %c1_167 = arith.constant 1 : index
    cf.br ^bb160(%c0_165 : index)
  ^bb160(%195: index):  // 2 preds: ^bb159, ^bb170
    %196 = arith.cmpi slt, %195, %c1_166 : index
    cf.cond_br %196, ^bb161, ^bb171
  ^bb161:  // pred: ^bb160
    %c0_168 = arith.constant 0 : index
    %c14_169 = arith.constant 14 : index
    %c1_170 = arith.constant 1 : index
    cf.br ^bb162(%c0_168 : index)
  ^bb162(%197: index):  // 2 preds: ^bb161, ^bb169
    %198 = arith.cmpi slt, %197, %c14_169 : index
    cf.cond_br %198, ^bb163, ^bb170
  ^bb163:  // pred: ^bb162
    %c0_171 = arith.constant 0 : index
    %c14_172 = arith.constant 14 : index
    %c1_173 = arith.constant 1 : index
    cf.br ^bb164(%c0_171 : index)
  ^bb164(%199: index):  // 2 preds: ^bb163, ^bb168
    %200 = arith.cmpi slt, %199, %c14_172 : index
    cf.cond_br %200, ^bb165, ^bb169
  ^bb165:  // pred: ^bb164
    %c0_174 = arith.constant 0 : index
    %c8_175 = arith.constant 8 : index
    %c1_176 = arith.constant 1 : index
    cf.br ^bb166(%c0_174 : index)
  ^bb166(%201: index):  // 2 preds: ^bb165, ^bb167
    %202 = arith.cmpi slt, %201, %c8_175 : index
    cf.cond_br %202, ^bb167, ^bb168
  ^bb167:  // pred: ^bb166
    %203 = memref.load %alloc_151[%195, %201, %197, %199] : memref<1x8x14x14xf32>
    memref.store %203, %alloc_164[%195, %197, %199, %201] : memref<1x14x14x8xf32>
    %204 = arith.addi %201, %c1_176 : index
    cf.br ^bb166(%204 : index)
  ^bb168:  // pred: ^bb166
    %205 = arith.addi %199, %c1_173 : index
    cf.br ^bb164(%205 : index)
  ^bb169:  // pred: ^bb164
    %206 = arith.addi %197, %c1_170 : index
    cf.br ^bb162(%206 : index)
  ^bb170:  // pred: ^bb162
    %207 = arith.addi %195, %c1_167 : index
    cf.br ^bb160(%207 : index)
  ^bb171:  // pred: ^bb160
    memref.dealloc %alloc_151 : memref<1x8x14x14xf32>
    %alloc_177 = memref.alloc() {alignment = 64 : i64} : memref<16x5x5x8xf32>
    %c0_178 = arith.constant 0 : index
    %c16 = arith.constant 16 : index
    %c1_179 = arith.constant 1 : index
    cf.br ^bb172(%c0_178 : index)
  ^bb172(%208: index):  // 2 preds: ^bb171, ^bb182
    %209 = arith.cmpi slt, %208, %c16 : index
    cf.cond_br %209, ^bb173, ^bb183
  ^bb173:  // pred: ^bb172
    %c0_180 = arith.constant 0 : index
    %c5_181 = arith.constant 5 : index
    %c1_182 = arith.constant 1 : index
    cf.br ^bb174(%c0_180 : index)
  ^bb174(%210: index):  // 2 preds: ^bb173, ^bb181
    %211 = arith.cmpi slt, %210, %c5_181 : index
    cf.cond_br %211, ^bb175, ^bb182
  ^bb175:  // pred: ^bb174
    %c0_183 = arith.constant 0 : index
    %c5_184 = arith.constant 5 : index
    %c1_185 = arith.constant 1 : index
    cf.br ^bb176(%c0_183 : index)
  ^bb176(%212: index):  // 2 preds: ^bb175, ^bb180
    %213 = arith.cmpi slt, %212, %c5_184 : index
    cf.cond_br %213, ^bb177, ^bb181
  ^bb177:  // pred: ^bb176
    %c0_186 = arith.constant 0 : index
    %c8_187 = arith.constant 8 : index
    %c1_188 = arith.constant 1 : index
    cf.br ^bb178(%c0_186 : index)
  ^bb178(%214: index):  // 2 preds: ^bb177, ^bb179
    %215 = arith.cmpi slt, %214, %c8_187 : index
    cf.cond_br %215, ^bb179, ^bb180
  ^bb179:  // pred: ^bb178
    %216 = memref.load %3[%208, %214, %210, %212] : memref<16x8x5x5xf32>
    memref.store %216, %alloc_177[%208, %210, %212, %214] : memref<16x5x5x8xf32>
    %217 = arith.addi %214, %c1_188 : index
    cf.br ^bb178(%217 : index)
  ^bb180:  // pred: ^bb178
    %218 = arith.addi %212, %c1_185 : index
    cf.br ^bb176(%218 : index)
  ^bb181:  // pred: ^bb176
    %219 = arith.addi %210, %c1_182 : index
    cf.br ^bb174(%219 : index)
  ^bb182:  // pred: ^bb174
    %220 = arith.addi %208, %c1_179 : index
    cf.br ^bb172(%220 : index)
  ^bb183:  // pred: ^bb172
    %alloc_189 = memref.alloc() {alignment = 64 : i64} : memref<1x18x18x8xf32>
    %c0_190 = arith.constant 0 : index
    %c1_191 = arith.constant 1 : index
    %c1_192 = arith.constant 1 : index
    cf.br ^bb184(%c0_190 : index)
  ^bb184(%221: index):  // 2 preds: ^bb183, ^bb194
    %222 = arith.cmpi slt, %221, %c1_191 : index
    cf.cond_br %222, ^bb185, ^bb195
  ^bb185:  // pred: ^bb184
    %c0_193 = arith.constant 0 : index
    %c18 = arith.constant 18 : index
    %c1_194 = arith.constant 1 : index
    cf.br ^bb186(%c0_193 : index)
  ^bb186(%223: index):  // 2 preds: ^bb185, ^bb193
    %224 = arith.cmpi slt, %223, %c18 : index
    cf.cond_br %224, ^bb187, ^bb194
  ^bb187:  // pred: ^bb186
    %c0_195 = arith.constant 0 : index
    %c18_196 = arith.constant 18 : index
    %c1_197 = arith.constant 1 : index
    cf.br ^bb188(%c0_195 : index)
  ^bb188(%225: index):  // 2 preds: ^bb187, ^bb192
    %226 = arith.cmpi slt, %225, %c18_196 : index
    cf.cond_br %226, ^bb189, ^bb193
  ^bb189:  // pred: ^bb188
    %c0_198 = arith.constant 0 : index
    %c8_199 = arith.constant 8 : index
    %c1_200 = arith.constant 1 : index
    cf.br ^bb190(%c0_198 : index)
  ^bb190(%227: index):  // 2 preds: ^bb189, ^bb191
    %228 = arith.cmpi slt, %227, %c8_199 : index
    cf.cond_br %228, ^bb191, ^bb192
  ^bb191:  // pred: ^bb190
    memref.store %cst_0, %alloc_189[%221, %223, %225, %227] : memref<1x18x18x8xf32>
    %229 = arith.addi %227, %c1_200 : index
    cf.br ^bb190(%229 : index)
  ^bb192:  // pred: ^bb190
    %230 = arith.addi %225, %c1_197 : index
    cf.br ^bb188(%230 : index)
  ^bb193:  // pred: ^bb188
    %231 = arith.addi %223, %c1_194 : index
    cf.br ^bb186(%231 : index)
  ^bb194:  // pred: ^bb186
    %232 = arith.addi %221, %c1_192 : index
    cf.br ^bb184(%232 : index)
  ^bb195:  // pred: ^bb184
    %subview_201 = memref.subview %alloc_189[0, 2, 2, 0] [1, 14, 14, 8] [1, 1, 1, 1] : memref<1x18x18x8xf32> to memref<1x14x14x8xf32, strided<[2592, 144, 8, 1], offset: 304>>
    memref.copy %alloc_164, %subview_201 : memref<1x14x14x8xf32> to memref<1x14x14x8xf32, strided<[2592, 144, 8, 1], offset: 304>>
    memref.dealloc %alloc_164 : memref<1x14x14x8xf32>
    %alloc_202 = memref.alloc() {alignment = 64 : i64} : memref<1x14x14x16xf32>
    %c0_203 = arith.constant 0 : index
    %c1_204 = arith.constant 1 : index
    %c1_205 = arith.constant 1 : index
    cf.br ^bb196(%c0_203 : index)
  ^bb196(%233: index):  // 2 preds: ^bb195, ^bb206
    %234 = arith.cmpi slt, %233, %c1_204 : index
    cf.cond_br %234, ^bb197, ^bb207
  ^bb197:  // pred: ^bb196
    %c0_206 = arith.constant 0 : index
    %c14_207 = arith.constant 14 : index
    %c1_208 = arith.constant 1 : index
    cf.br ^bb198(%c0_206 : index)
  ^bb198(%235: index):  // 2 preds: ^bb197, ^bb205
    %236 = arith.cmpi slt, %235, %c14_207 : index
    cf.cond_br %236, ^bb199, ^bb206
  ^bb199:  // pred: ^bb198
    %c0_209 = arith.constant 0 : index
    %c14_210 = arith.constant 14 : index
    %c1_211 = arith.constant 1 : index
    cf.br ^bb200(%c0_209 : index)
  ^bb200(%237: index):  // 2 preds: ^bb199, ^bb204
    %238 = arith.cmpi slt, %237, %c14_210 : index
    cf.cond_br %238, ^bb201, ^bb205
  ^bb201:  // pred: ^bb200
    %c0_212 = arith.constant 0 : index
    %c16_213 = arith.constant 16 : index
    %c1_214 = arith.constant 1 : index
    cf.br ^bb202(%c0_212 : index)
  ^bb202(%239: index):  // 2 preds: ^bb201, ^bb203
    %240 = arith.cmpi slt, %239, %c16_213 : index
    cf.cond_br %240, ^bb203, ^bb204
  ^bb203:  // pred: ^bb202
    memref.store %cst_0, %alloc_202[%233, %235, %237, %239] : memref<1x14x14x16xf32>
    %241 = arith.addi %239, %c1_214 : index
    cf.br ^bb202(%241 : index)
  ^bb204:  // pred: ^bb202
    %242 = arith.addi %237, %c1_211 : index
    cf.br ^bb200(%242 : index)
  ^bb205:  // pred: ^bb200
    %243 = arith.addi %235, %c1_208 : index
    cf.br ^bb198(%243 : index)
  ^bb206:  // pred: ^bb198
    %244 = arith.addi %233, %c1_205 : index
    cf.br ^bb196(%244 : index)
  ^bb207:  // pred: ^bb196
    %c0_215 = arith.constant 0 : index
    %c1_216 = arith.constant 1 : index
    %c1_217 = arith.constant 1 : index
    cf.br ^bb208(%c0_215 : index)
  ^bb208(%245: index):  // 2 preds: ^bb207, ^bb227
    %246 = arith.cmpi slt, %245, %c1_216 : index
    cf.cond_br %246, ^bb209, ^bb228
  ^bb209:  // pred: ^bb208
    %c0_218 = arith.constant 0 : index
    %c14_219 = arith.constant 14 : index
    %c1_220 = arith.constant 1 : index
    cf.br ^bb210(%c0_218 : index)
  ^bb210(%247: index):  // 2 preds: ^bb209, ^bb226
    %248 = arith.cmpi slt, %247, %c14_219 : index
    cf.cond_br %248, ^bb211, ^bb227
  ^bb211:  // pred: ^bb210
    %c0_221 = arith.constant 0 : index
    %c14_222 = arith.constant 14 : index
    %c1_223 = arith.constant 1 : index
    cf.br ^bb212(%c0_221 : index)
  ^bb212(%249: index):  // 2 preds: ^bb211, ^bb225
    %250 = arith.cmpi slt, %249, %c14_222 : index
    cf.cond_br %250, ^bb213, ^bb226
  ^bb213:  // pred: ^bb212
    %c0_224 = arith.constant 0 : index
    %c16_225 = arith.constant 16 : index
    %c1_226 = arith.constant 1 : index
    cf.br ^bb214(%c0_224 : index)
  ^bb214(%251: index):  // 2 preds: ^bb213, ^bb224
    %252 = arith.cmpi slt, %251, %c16_225 : index
    cf.cond_br %252, ^bb215, ^bb225
  ^bb215:  // pred: ^bb214
    %c0_227 = arith.constant 0 : index
    %c5_228 = arith.constant 5 : index
    %c1_229 = arith.constant 1 : index
    cf.br ^bb216(%c0_227 : index)
  ^bb216(%253: index):  // 2 preds: ^bb215, ^bb223
    %254 = arith.cmpi slt, %253, %c5_228 : index
    cf.cond_br %254, ^bb217, ^bb224
  ^bb217:  // pred: ^bb216
    %c0_230 = arith.constant 0 : index
    %c5_231 = arith.constant 5 : index
    %c1_232 = arith.constant 1 : index
    cf.br ^bb218(%c0_230 : index)
  ^bb218(%255: index):  // 2 preds: ^bb217, ^bb222
    %256 = arith.cmpi slt, %255, %c5_231 : index
    cf.cond_br %256, ^bb219, ^bb223
  ^bb219:  // pred: ^bb218
    %c0_233 = arith.constant 0 : index
    %c8_234 = arith.constant 8 : index
    %c1_235 = arith.constant 1 : index
    cf.br ^bb220(%c0_233 : index)
  ^bb220(%257: index):  // 2 preds: ^bb219, ^bb221
    %258 = arith.cmpi slt, %257, %c8_234 : index
    cf.cond_br %258, ^bb221, ^bb222
  ^bb221:  // pred: ^bb220
    %259 = arith.addi %247, %253 : index
    %260 = arith.addi %249, %255 : index
    %261 = memref.load %alloc_189[%245, %259, %260, %257] : memref<1x18x18x8xf32>
    %262 = memref.load %alloc_177[%251, %253, %255, %257] : memref<16x5x5x8xf32>
    %263 = memref.load %alloc_202[%245, %247, %249, %251] : memref<1x14x14x16xf32>
    %264 = arith.mulf %261, %262 : f32
    %265 = arith.addf %263, %264 : f32
    memref.store %265, %alloc_202[%245, %247, %249, %251] : memref<1x14x14x16xf32>
    %266 = arith.addi %257, %c1_235 : index
    cf.br ^bb220(%266 : index)
  ^bb222:  // pred: ^bb220
    %267 = arith.addi %255, %c1_232 : index
    cf.br ^bb218(%267 : index)
  ^bb223:  // pred: ^bb218
    %268 = arith.addi %253, %c1_229 : index
    cf.br ^bb216(%268 : index)
  ^bb224:  // pred: ^bb216
    %269 = arith.addi %251, %c1_226 : index
    cf.br ^bb214(%269 : index)
  ^bb225:  // pred: ^bb214
    %270 = arith.addi %249, %c1_223 : index
    cf.br ^bb212(%270 : index)
  ^bb226:  // pred: ^bb212
    %271 = arith.addi %247, %c1_220 : index
    cf.br ^bb210(%271 : index)
  ^bb227:  // pred: ^bb210
    %272 = arith.addi %245, %c1_217 : index
    cf.br ^bb208(%272 : index)
  ^bb228:  // pred: ^bb208
    memref.dealloc %alloc_189 : memref<1x18x18x8xf32>
    memref.dealloc %alloc_177 : memref<16x5x5x8xf32>
    %alloc_236 = memref.alloc() {alignment = 64 : i64} : memref<1x16x14x14xf32>
    %c0_237 = arith.constant 0 : index
    %c1_238 = arith.constant 1 : index
    %c1_239 = arith.constant 1 : index
    cf.br ^bb229(%c0_237 : index)
  ^bb229(%273: index):  // 2 preds: ^bb228, ^bb239
    %274 = arith.cmpi slt, %273, %c1_238 : index
    cf.cond_br %274, ^bb230, ^bb240
  ^bb230:  // pred: ^bb229
    %c0_240 = arith.constant 0 : index
    %c16_241 = arith.constant 16 : index
    %c1_242 = arith.constant 1 : index
    cf.br ^bb231(%c0_240 : index)
  ^bb231(%275: index):  // 2 preds: ^bb230, ^bb238
    %276 = arith.cmpi slt, %275, %c16_241 : index
    cf.cond_br %276, ^bb232, ^bb239
  ^bb232:  // pred: ^bb231
    %c0_243 = arith.constant 0 : index
    %c14_244 = arith.constant 14 : index
    %c1_245 = arith.constant 1 : index
    cf.br ^bb233(%c0_243 : index)
  ^bb233(%277: index):  // 2 preds: ^bb232, ^bb237
    %278 = arith.cmpi slt, %277, %c14_244 : index
    cf.cond_br %278, ^bb234, ^bb238
  ^bb234:  // pred: ^bb233
    %c0_246 = arith.constant 0 : index
    %c14_247 = arith.constant 14 : index
    %c1_248 = arith.constant 1 : index
    cf.br ^bb235(%c0_246 : index)
  ^bb235(%279: index):  // 2 preds: ^bb234, ^bb236
    %280 = arith.cmpi slt, %279, %c14_247 : index
    cf.cond_br %280, ^bb236, ^bb237
  ^bb236:  // pred: ^bb235
    %281 = memref.load %alloc_202[%273, %277, %279, %275] : memref<1x14x14x16xf32>
    memref.store %281, %alloc_236[%273, %275, %277, %279] : memref<1x16x14x14xf32>
    %282 = arith.addi %279, %c1_248 : index
    cf.br ^bb235(%282 : index)
  ^bb237:  // pred: ^bb235
    %283 = arith.addi %277, %c1_245 : index
    cf.br ^bb233(%283 : index)
  ^bb238:  // pred: ^bb233
    %284 = arith.addi %275, %c1_242 : index
    cf.br ^bb231(%284 : index)
  ^bb239:  // pred: ^bb231
    %285 = arith.addi %273, %c1_239 : index
    cf.br ^bb229(%285 : index)
  ^bb240:  // pred: ^bb229
    memref.dealloc %alloc_202 : memref<1x14x14x16xf32>
    %alloc_249 = memref.alloc() {alignment = 64 : i64} : memref<1x16x14x14xf32>
    %c0_250 = arith.constant 0 : index
    %c1_251 = arith.constant 1 : index
    %c1_252 = arith.constant 1 : index
    cf.br ^bb241(%c0_250 : index)
  ^bb241(%286: index):  // 2 preds: ^bb240, ^bb251
    %287 = arith.cmpi slt, %286, %c1_251 : index
    cf.cond_br %287, ^bb242, ^bb252
  ^bb242:  // pred: ^bb241
    %c0_253 = arith.constant 0 : index
    %c16_254 = arith.constant 16 : index
    %c1_255 = arith.constant 1 : index
    cf.br ^bb243(%c0_253 : index)
  ^bb243(%288: index):  // 2 preds: ^bb242, ^bb250
    %289 = arith.cmpi slt, %288, %c16_254 : index
    cf.cond_br %289, ^bb244, ^bb251
  ^bb244:  // pred: ^bb243
    %c0_256 = arith.constant 0 : index
    %c14_257 = arith.constant 14 : index
    %c1_258 = arith.constant 1 : index
    cf.br ^bb245(%c0_256 : index)
  ^bb245(%290: index):  // 2 preds: ^bb244, ^bb249
    %291 = arith.cmpi slt, %290, %c14_257 : index
    cf.cond_br %291, ^bb246, ^bb250
  ^bb246:  // pred: ^bb245
    %c0_259 = arith.constant 0 : index
    %c14_260 = arith.constant 14 : index
    %c1_261 = arith.constant 1 : index
    cf.br ^bb247(%c0_259 : index)
  ^bb247(%292: index):  // 2 preds: ^bb246, ^bb248
    %293 = arith.cmpi slt, %292, %c14_260 : index
    cf.cond_br %293, ^bb248, ^bb249
  ^bb248:  // pred: ^bb247
    %294 = memref.load %alloc_236[%c0, %288, %290, %292] : memref<1x16x14x14xf32>
    %295 = memref.load %0[%c0, %288, %c0, %c0] : memref<1x16x1x1xf32>
    %296 = arith.addf %294, %295 : f32
    memref.store %296, %alloc_249[%286, %288, %290, %292] : memref<1x16x14x14xf32>
    %297 = arith.addi %292, %c1_261 : index
    cf.br ^bb247(%297 : index)
  ^bb249:  // pred: ^bb247
    %298 = arith.addi %290, %c1_258 : index
    cf.br ^bb245(%298 : index)
  ^bb250:  // pred: ^bb245
    %299 = arith.addi %288, %c1_255 : index
    cf.br ^bb243(%299 : index)
  ^bb251:  // pred: ^bb243
    %300 = arith.addi %286, %c1_252 : index
    cf.br ^bb241(%300 : index)
  ^bb252:  // pred: ^bb241
    memref.dealloc %alloc_236 : memref<1x16x14x14xf32>
    %alloc_262 = memref.alloc() {alignment = 64 : i64} : memref<1x16x14x14xf32>
    %c0_263 = arith.constant 0 : index
    %c1_264 = arith.constant 1 : index
    %c1_265 = arith.constant 1 : index
    cf.br ^bb253(%c0_263 : index)
  ^bb253(%301: index):  // 2 preds: ^bb252, ^bb263
    %302 = arith.cmpi slt, %301, %c1_264 : index
    cf.cond_br %302, ^bb254, ^bb264
  ^bb254:  // pred: ^bb253
    %c0_266 = arith.constant 0 : index
    %c16_267 = arith.constant 16 : index
    %c1_268 = arith.constant 1 : index
    cf.br ^bb255(%c0_266 : index)
  ^bb255(%303: index):  // 2 preds: ^bb254, ^bb262
    %304 = arith.cmpi slt, %303, %c16_267 : index
    cf.cond_br %304, ^bb256, ^bb263
  ^bb256:  // pred: ^bb255
    %c0_269 = arith.constant 0 : index
    %c14_270 = arith.constant 14 : index
    %c1_271 = arith.constant 1 : index
    cf.br ^bb257(%c0_269 : index)
  ^bb257(%305: index):  // 2 preds: ^bb256, ^bb261
    %306 = arith.cmpi slt, %305, %c14_270 : index
    cf.cond_br %306, ^bb258, ^bb262
  ^bb258:  // pred: ^bb257
    %c0_272 = arith.constant 0 : index
    %c14_273 = arith.constant 14 : index
    %c1_274 = arith.constant 1 : index
    cf.br ^bb259(%c0_272 : index)
  ^bb259(%307: index):  // 2 preds: ^bb258, ^bb260
    %308 = arith.cmpi slt, %307, %c14_273 : index
    cf.cond_br %308, ^bb260, ^bb261
  ^bb260:  // pred: ^bb259
    %309 = memref.load %alloc_249[%c0, %303, %305, %307] : memref<1x16x14x14xf32>
    %310 = arith.cmpf ugt, %309, %cst_0 : f32
    %311 = arith.select %310, %309, %cst_0 : f32
    %312 = arith.cmpf uno, %cst_0, %cst_0 : f32
    %313 = arith.select %312, %cst_0, %311 : f32
    memref.store %313, %alloc_262[%301, %303, %305, %307] : memref<1x16x14x14xf32>
    %314 = arith.addi %307, %c1_274 : index
    cf.br ^bb259(%314 : index)
  ^bb261:  // pred: ^bb259
    %315 = arith.addi %305, %c1_271 : index
    cf.br ^bb257(%315 : index)
  ^bb262:  // pred: ^bb257
    %316 = arith.addi %303, %c1_268 : index
    cf.br ^bb255(%316 : index)
  ^bb263:  // pred: ^bb255
    %317 = arith.addi %301, %c1_265 : index
    cf.br ^bb253(%317 : index)
  ^bb264:  // pred: ^bb253
    memref.dealloc %alloc_249 : memref<1x16x14x14xf32>
    %alloc_275 = memref.alloc() {alignment = 64 : i64} : memref<1x14x14x16xf32>
    %c0_276 = arith.constant 0 : index
    %c1_277 = arith.constant 1 : index
    %c1_278 = arith.constant 1 : index
    cf.br ^bb265(%c0_276 : index)
  ^bb265(%318: index):  // 2 preds: ^bb264, ^bb275
    %319 = arith.cmpi slt, %318, %c1_277 : index
    cf.cond_br %319, ^bb266, ^bb276
  ^bb266:  // pred: ^bb265
    %c0_279 = arith.constant 0 : index
    %c14_280 = arith.constant 14 : index
    %c1_281 = arith.constant 1 : index
    cf.br ^bb267(%c0_279 : index)
  ^bb267(%320: index):  // 2 preds: ^bb266, ^bb274
    %321 = arith.cmpi slt, %320, %c14_280 : index
    cf.cond_br %321, ^bb268, ^bb275
  ^bb268:  // pred: ^bb267
    %c0_282 = arith.constant 0 : index
    %c14_283 = arith.constant 14 : index
    %c1_284 = arith.constant 1 : index
    cf.br ^bb269(%c0_282 : index)
  ^bb269(%322: index):  // 2 preds: ^bb268, ^bb273
    %323 = arith.cmpi slt, %322, %c14_283 : index
    cf.cond_br %323, ^bb270, ^bb274
  ^bb270:  // pred: ^bb269
    %c0_285 = arith.constant 0 : index
    %c16_286 = arith.constant 16 : index
    %c1_287 = arith.constant 1 : index
    cf.br ^bb271(%c0_285 : index)
  ^bb271(%324: index):  // 2 preds: ^bb270, ^bb272
    %325 = arith.cmpi slt, %324, %c16_286 : index
    cf.cond_br %325, ^bb272, ^bb273
  ^bb272:  // pred: ^bb271
    %326 = memref.load %alloc_262[%318, %324, %320, %322] : memref<1x16x14x14xf32>
    memref.store %326, %alloc_275[%318, %320, %322, %324] : memref<1x14x14x16xf32>
    %327 = arith.addi %324, %c1_287 : index
    cf.br ^bb271(%327 : index)
  ^bb273:  // pred: ^bb271
    %328 = arith.addi %322, %c1_284 : index
    cf.br ^bb269(%328 : index)
  ^bb274:  // pred: ^bb269
    %329 = arith.addi %320, %c1_281 : index
    cf.br ^bb267(%329 : index)
  ^bb275:  // pred: ^bb267
    %330 = arith.addi %318, %c1_278 : index
    cf.br ^bb265(%330 : index)
  ^bb276:  // pred: ^bb265
    memref.dealloc %alloc_262 : memref<1x16x14x14xf32>
    %alloc_288 = memref.alloc() {alignment = 64 : i64} : memref<1x4x4x16xf32>
    %c0_289 = arith.constant 0 : index
    %c1_290 = arith.constant 1 : index
    %c1_291 = arith.constant 1 : index
    cf.br ^bb277(%c0_289 : index)
  ^bb277(%331: index):  // 2 preds: ^bb276, ^bb287
    %332 = arith.cmpi slt, %331, %c1_290 : index
    cf.cond_br %332, ^bb278, ^bb288
  ^bb278:  // pred: ^bb277
    %c0_292 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c1_293 = arith.constant 1 : index
    cf.br ^bb279(%c0_292 : index)
  ^bb279(%333: index):  // 2 preds: ^bb278, ^bb286
    %334 = arith.cmpi slt, %333, %c4 : index
    cf.cond_br %334, ^bb280, ^bb287
  ^bb280:  // pred: ^bb279
    %c0_294 = arith.constant 0 : index
    %c4_295 = arith.constant 4 : index
    %c1_296 = arith.constant 1 : index
    cf.br ^bb281(%c0_294 : index)
  ^bb281(%335: index):  // 2 preds: ^bb280, ^bb285
    %336 = arith.cmpi slt, %335, %c4_295 : index
    cf.cond_br %336, ^bb282, ^bb286
  ^bb282:  // pred: ^bb281
    %c0_297 = arith.constant 0 : index
    %c16_298 = arith.constant 16 : index
    %c1_299 = arith.constant 1 : index
    cf.br ^bb283(%c0_297 : index)
  ^bb283(%337: index):  // 2 preds: ^bb282, ^bb284
    %338 = arith.cmpi slt, %337, %c16_298 : index
    cf.cond_br %338, ^bb284, ^bb285
  ^bb284:  // pred: ^bb283
    memref.store %cst, %alloc_288[%331, %333, %335, %337] : memref<1x4x4x16xf32>
    %339 = arith.addi %337, %c1_299 : index
    cf.br ^bb283(%339 : index)
  ^bb285:  // pred: ^bb283
    %340 = arith.addi %335, %c1_296 : index
    cf.br ^bb281(%340 : index)
  ^bb286:  // pred: ^bb281
    %341 = arith.addi %333, %c1_293 : index
    cf.br ^bb279(%341 : index)
  ^bb287:  // pred: ^bb279
    %342 = arith.addi %331, %c1_291 : index
    cf.br ^bb277(%342 : index)
  ^bb288:  // pred: ^bb277
    %c0_300 = arith.constant 0 : index
    %c1_301 = arith.constant 1 : index
    %c1_302 = arith.constant 1 : index
    cf.br ^bb289(%c0_300 : index)
  ^bb289(%343: index):  // 2 preds: ^bb288, ^bb305
    %344 = arith.cmpi slt, %343, %c1_301 : index
    cf.cond_br %344, ^bb290, ^bb306
  ^bb290:  // pred: ^bb289
    %c0_303 = arith.constant 0 : index
    %c4_304 = arith.constant 4 : index
    %c1_305 = arith.constant 1 : index
    cf.br ^bb291(%c0_303 : index)
  ^bb291(%345: index):  // 2 preds: ^bb290, ^bb304
    %346 = arith.cmpi slt, %345, %c4_304 : index
    cf.cond_br %346, ^bb292, ^bb305
  ^bb292:  // pred: ^bb291
    %c0_306 = arith.constant 0 : index
    %c4_307 = arith.constant 4 : index
    %c1_308 = arith.constant 1 : index
    cf.br ^bb293(%c0_306 : index)
  ^bb293(%347: index):  // 2 preds: ^bb292, ^bb303
    %348 = arith.cmpi slt, %347, %c4_307 : index
    cf.cond_br %348, ^bb294, ^bb304
  ^bb294:  // pred: ^bb293
    %c0_309 = arith.constant 0 : index
    %c16_310 = arith.constant 16 : index
    %c1_311 = arith.constant 1 : index
    cf.br ^bb295(%c0_309 : index)
  ^bb295(%349: index):  // 2 preds: ^bb294, ^bb302
    %350 = arith.cmpi slt, %349, %c16_310 : index
    cf.cond_br %350, ^bb296, ^bb303
  ^bb296:  // pred: ^bb295
    %c0_312 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1_313 = arith.constant 1 : index
    cf.br ^bb297(%c0_312 : index)
  ^bb297(%351: index):  // 2 preds: ^bb296, ^bb301
    %352 = arith.cmpi slt, %351, %c3 : index
    cf.cond_br %352, ^bb298, ^bb302
  ^bb298:  // pred: ^bb297
    %c0_314 = arith.constant 0 : index
    %c3_315 = arith.constant 3 : index
    %c1_316 = arith.constant 1 : index
    cf.br ^bb299(%c0_314 : index)
  ^bb299(%353: index):  // 2 preds: ^bb298, ^bb300
    %354 = arith.cmpi slt, %353, %c3_315 : index
    cf.cond_br %354, ^bb300, ^bb301
  ^bb300:  // pred: ^bb299
    %c3_317 = arith.constant 3 : index
    %355 = arith.muli %345, %c3_317 : index
    %356 = arith.addi %355, %351 : index
    %c3_318 = arith.constant 3 : index
    %357 = arith.muli %347, %c3_318 : index
    %358 = arith.addi %357, %353 : index
    %359 = memref.load %alloc_275[%343, %356, %358, %349] : memref<1x14x14x16xf32>
    %360 = memref.load %alloc_288[%343, %345, %347, %349] : memref<1x4x4x16xf32>
    %361 = arith.cmpf ugt, %360, %359 : f32
    %362 = arith.select %361, %360, %359 : f32
    %363 = arith.cmpf uno, %359, %359 : f32
    %364 = arith.select %363, %359, %362 : f32
    memref.store %364, %alloc_288[%343, %345, %347, %349] : memref<1x4x4x16xf32>
    %365 = arith.addi %353, %c1_316 : index
    cf.br ^bb299(%365 : index)
  ^bb301:  // pred: ^bb299
    %366 = arith.addi %351, %c1_313 : index
    cf.br ^bb297(%366 : index)
  ^bb302:  // pred: ^bb297
    %367 = arith.addi %349, %c1_311 : index
    cf.br ^bb295(%367 : index)
  ^bb303:  // pred: ^bb295
    %368 = arith.addi %347, %c1_308 : index
    cf.br ^bb293(%368 : index)
  ^bb304:  // pred: ^bb293
    %369 = arith.addi %345, %c1_305 : index
    cf.br ^bb291(%369 : index)
  ^bb305:  // pred: ^bb291
    %370 = arith.addi %343, %c1_302 : index
    cf.br ^bb289(%370 : index)
  ^bb306:  // pred: ^bb289
    memref.dealloc %alloc_275 : memref<1x14x14x16xf32>
    %alloc_319 = memref.alloc() {alignment = 64 : i64} : memref<1x16x4x4xf32>
    %c0_320 = arith.constant 0 : index
    %c1_321 = arith.constant 1 : index
    %c1_322 = arith.constant 1 : index
    cf.br ^bb307(%c0_320 : index)
  ^bb307(%371: index):  // 2 preds: ^bb306, ^bb317
    %372 = arith.cmpi slt, %371, %c1_321 : index
    cf.cond_br %372, ^bb308, ^bb318
  ^bb308:  // pred: ^bb307
    %c0_323 = arith.constant 0 : index
    %c16_324 = arith.constant 16 : index
    %c1_325 = arith.constant 1 : index
    cf.br ^bb309(%c0_323 : index)
  ^bb309(%373: index):  // 2 preds: ^bb308, ^bb316
    %374 = arith.cmpi slt, %373, %c16_324 : index
    cf.cond_br %374, ^bb310, ^bb317
  ^bb310:  // pred: ^bb309
    %c0_326 = arith.constant 0 : index
    %c4_327 = arith.constant 4 : index
    %c1_328 = arith.constant 1 : index
    cf.br ^bb311(%c0_326 : index)
  ^bb311(%375: index):  // 2 preds: ^bb310, ^bb315
    %376 = arith.cmpi slt, %375, %c4_327 : index
    cf.cond_br %376, ^bb312, ^bb316
  ^bb312:  // pred: ^bb311
    %c0_329 = arith.constant 0 : index
    %c4_330 = arith.constant 4 : index
    %c1_331 = arith.constant 1 : index
    cf.br ^bb313(%c0_329 : index)
  ^bb313(%377: index):  // 2 preds: ^bb312, ^bb314
    %378 = arith.cmpi slt, %377, %c4_330 : index
    cf.cond_br %378, ^bb314, ^bb315
  ^bb314:  // pred: ^bb313
    %379 = memref.load %alloc_288[%371, %375, %377, %373] : memref<1x4x4x16xf32>
    memref.store %379, %alloc_319[%371, %373, %375, %377] : memref<1x16x4x4xf32>
    %380 = arith.addi %377, %c1_331 : index
    cf.br ^bb313(%380 : index)
  ^bb315:  // pred: ^bb313
    %381 = arith.addi %375, %c1_328 : index
    cf.br ^bb311(%381 : index)
  ^bb316:  // pred: ^bb311
    %382 = arith.addi %373, %c1_325 : index
    cf.br ^bb309(%382 : index)
  ^bb317:  // pred: ^bb309
    %383 = arith.addi %371, %c1_322 : index
    cf.br ^bb307(%383 : index)
  ^bb318:  // pred: ^bb307
    memref.dealloc %alloc_288 : memref<1x4x4x16xf32>
    %collapse_shape = memref.collapse_shape %alloc_319 [[0], [1, 2, 3]] : memref<1x16x4x4xf32> into memref<1x256xf32>
    %expand_shape = memref.expand_shape %collapse_shape [[0, 1], [2]] output_shape [1, 1, 256] : memref<1x256xf32> into memref<1x1x256xf32>
    %alloc_332 = memref.alloc() {alignment = 64 : i64} : memref<1x1x10xf32>
    %c0_333 = arith.constant 0 : index
    %c1_334 = arith.constant 1 : index
    %c1_335 = arith.constant 1 : index
    cf.br ^bb319(%c0_333 : index)
  ^bb319(%384: index):  // 2 preds: ^bb318, ^bb326
    %385 = arith.cmpi slt, %384, %c1_334 : index
    cf.cond_br %385, ^bb320, ^bb327
  ^bb320:  // pred: ^bb319
    %c0_336 = arith.constant 0 : index
    %c1_337 = arith.constant 1 : index
    %c1_338 = arith.constant 1 : index
    cf.br ^bb321(%c0_336 : index)
  ^bb321(%386: index):  // 2 preds: ^bb320, ^bb325
    %387 = arith.cmpi slt, %386, %c1_337 : index
    cf.cond_br %387, ^bb322, ^bb326
  ^bb322:  // pred: ^bb321
    %c0_339 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1_340 = arith.constant 1 : index
    cf.br ^bb323(%c0_339 : index)
  ^bb323(%388: index):  // 2 preds: ^bb322, ^bb324
    %389 = arith.cmpi slt, %388, %c10 : index
    cf.cond_br %389, ^bb324, ^bb325
  ^bb324:  // pred: ^bb323
    memref.store %cst_0, %alloc_332[%384, %386, %388] : memref<1x1x10xf32>
    %390 = arith.addi %388, %c1_340 : index
    cf.br ^bb323(%390 : index)
  ^bb325:  // pred: ^bb323
    %391 = arith.addi %386, %c1_338 : index
    cf.br ^bb321(%391 : index)
  ^bb326:  // pred: ^bb321
    %392 = arith.addi %384, %c1_335 : index
    cf.br ^bb319(%392 : index)
  ^bb327:  // pred: ^bb319
    %c0_341 = arith.constant 0 : index
    %c1_342 = arith.constant 1 : index
    %c1_343 = arith.constant 1 : index
    cf.br ^bb328(%c0_341 : index)
  ^bb328(%393: index):  // 2 preds: ^bb327, ^bb338
    %394 = arith.cmpi slt, %393, %c1_342 : index
    cf.cond_br %394, ^bb329, ^bb339
  ^bb329:  // pred: ^bb328
    %c0_344 = arith.constant 0 : index
    %c1_345 = arith.constant 1 : index
    %c1_346 = arith.constant 1 : index
    cf.br ^bb330(%c0_344 : index)
  ^bb330(%395: index):  // 2 preds: ^bb329, ^bb337
    %396 = arith.cmpi slt, %395, %c1_345 : index
    cf.cond_br %396, ^bb331, ^bb338
  ^bb331:  // pred: ^bb330
    %c0_347 = arith.constant 0 : index
    %c10_348 = arith.constant 10 : index
    %c1_349 = arith.constant 1 : index
    cf.br ^bb332(%c0_347 : index)
  ^bb332(%397: index):  // 2 preds: ^bb331, ^bb336
    %398 = arith.cmpi slt, %397, %c10_348 : index
    cf.cond_br %398, ^bb333, ^bb337
  ^bb333:  // pred: ^bb332
    %c0_350 = arith.constant 0 : index
    %c256 = arith.constant 256 : index
    %c1_351 = arith.constant 1 : index
    cf.br ^bb334(%c0_350 : index)
  ^bb334(%399: index):  // 2 preds: ^bb333, ^bb335
    %400 = arith.cmpi slt, %399, %c256 : index
    cf.cond_br %400, ^bb335, ^bb336
  ^bb335:  // pred: ^bb334
    %401 = memref.load %expand_shape[%393, %395, %399] : memref<1x1x256xf32>
    %402 = memref.load %2[%393, %399, %397] : memref<1x256x10xf32>
    %403 = memref.load %alloc_332[%393, %395, %397] : memref<1x1x10xf32>
    %404 = arith.mulf %401, %402 : f32
    %405 = arith.addf %403, %404 : f32
    memref.store %405, %alloc_332[%393, %395, %397] : memref<1x1x10xf32>
    %406 = arith.addi %399, %c1_351 : index
    cf.br ^bb334(%406 : index)
  ^bb336:  // pred: ^bb334
    %407 = arith.addi %397, %c1_349 : index
    cf.br ^bb332(%407 : index)
  ^bb337:  // pred: ^bb332
    %408 = arith.addi %395, %c1_346 : index
    cf.br ^bb330(%408 : index)
  ^bb338:  // pred: ^bb330
    %409 = arith.addi %393, %c1_343 : index
    cf.br ^bb328(%409 : index)
  ^bb339:  // pred: ^bb328
    memref.dealloc %alloc_319 : memref<1x16x4x4xf32>
    %collapse_shape_352 = memref.collapse_shape %alloc_332 [[0, 1], [2]] : memref<1x1x10xf32> into memref<1x10xf32>
    %alloc_353 = memref.alloc() {alignment = 64 : i64} : memref<1x10xf32>
    %c0_354 = arith.constant 0 : index
    %c1_355 = arith.constant 1 : index
    %c1_356 = arith.constant 1 : index
    cf.br ^bb340(%c0_354 : index)
  ^bb340(%410: index):  // 2 preds: ^bb339, ^bb344
    %411 = arith.cmpi slt, %410, %c1_355 : index
    cf.cond_br %411, ^bb341, ^bb345
  ^bb341:  // pred: ^bb340
    %c0_357 = arith.constant 0 : index
    %c10_358 = arith.constant 10 : index
    %c1_359 = arith.constant 1 : index
    cf.br ^bb342(%c0_357 : index)
  ^bb342(%412: index):  // 2 preds: ^bb341, ^bb343
    %413 = arith.cmpi slt, %412, %c10_358 : index
    cf.cond_br %413, ^bb343, ^bb344
  ^bb343:  // pred: ^bb342
    %414 = memref.load %collapse_shape_352[%c0, %412] : memref<1x10xf32>
    %415 = memref.load %5[%c0, %412] : memref<1x10xf32>
    %416 = arith.addf %414, %415 : f32
    memref.store %416, %alloc_353[%410, %412] : memref<1x10xf32>
    %417 = arith.addi %412, %c1_359 : index
    cf.br ^bb342(%417 : index)
  ^bb344:  // pred: ^bb342
    %418 = arith.addi %410, %c1_356 : index
    cf.br ^bb340(%418 : index)
  ^bb345:  // pred: ^bb340
    memref.dealloc %alloc_332 : memref<1x1x10xf32>
    return %alloc_353 : memref<1x10xf32>
  }
}


